/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-12-29 17:28:48.359775
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[1]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[2]);
x6=((0.0535)*x2);
x7=((0.046784)*x4);
x8=(x0*x1);
x9=(x1*x3);
x10=((0.046784)*x2*x5);
IkReal x11=((1.0)*x0);
eetrans[0]=((-0.01036)+(((-1.0)*x7*x8))+(((-1.0)*x10*x11))+(((-1.0)*x11*x6))+(((0.00345)*x3))+(((5.0e-5)*x8))+(((0.026)*x0)));
IkReal x12=((1.0)*x3);
eetrans[1]=((0.000133)+(((-1.0)*x12*x6))+(((-1.0)*x7*x9))+(((-1.0)*x10*x12))+(((-0.00345)*x0))+(((5.0e-5)*x9))+(((0.026)*x3)));
eetrans[2]=((0.065409)+(((0.0535)*x1))+(((0.046784)*x1*x5))+(((-1.0)*x2*x7))+(((5.0e-5)*x2)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((0.01036)+px);
new_py=((-0.000133)+py);
new_pz=((-0.065409)+pz);
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[2];
j0eval[0]=((IKabs(px))+(IKabs(py)));
j0eval[1]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-0.876347161614103)+(((199.76466978105)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((-0.876347161614103)+(((199.76466978105)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x13=IKasin(((-0.876347161614103)+(((199.76466978105)*(pz*pz)))));
j2array[0]=((-1.57173090596205)+(((1.0)*x13)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.56986174762774)+(((-1.0)*x13)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x14=pz*pz;
IkReal x15=((11696.0)*pz);
j1eval[0]=((1.0)+(((1479.2899408284)*x14)));
j1eval[1]=IKsign(((169.0)+(((250000.0)*x14))));
j1eval[2]=((IKabs(((-0.325)+(((13375.0)*pz))+((cj2*x15))+(((304.096)*sj2)))))+(IKabs(((347.75)+(((-1.0)*sj2*x15))+(((12.5)*pz))+(((304.096)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x16=(pz*sj2);
j1eval[0]=((27.82)+(((-1.0)*pz))+(((935.68)*x16))+(((24.32768)*cj2)));
j1eval[1]=IKsign(((0.6955)+(((23.392)*x16))+(((0.608192)*cj2))+(((-0.025)*pz))));
j1eval[2]=((IKabs(((-0.0013375)+(((1.251472)*sj2))+(((13.0)*pz))+(((1.094371328)*cj2*sj2))+(((-0.0011696)*cj2)))))+(IKabs(((1.431125)+(((1.094371328)*(cj2*cj2)))+(((-500.0)*(pz*pz)))+(((2.502944)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((1.0)+(((35987.6923076923)*cj2*pz))+(((41153.8461538462)*pz))+(((-935.68)*sj2)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x17=(cj2*pz);
CheckValue<IkReal> x18=IKPowWithIntegerCheck(((0.00065)+(((23.392)*x17))+(((-0.608192)*sj2))+(((26.75)*pz))),-1);
if(!x18.valid){
continue;
}
CheckValue<IkReal> x19=IKPowWithIntegerCheck(((0.325)+(((-304.096)*sj2))+(((13375.0)*pz))+(((11696.0)*x17))),-1);
if(!x19.valid){
continue;
}
if( IKabs(((x18.value)*(((0.0013375)+(((0.0011696)*cj2))+(((-1.251472)*sj2))+(((-1.094371328)*cj2*sj2))+(((13.0)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x19.value)*(((546.5625)+(((1251.472)*cj2))+(((547.185664)*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x18.value)*(((0.0013375)+(((0.0011696)*cj2))+(((-1.251472)*sj2))+(((-1.094371328)*cj2*sj2))+(((13.0)*pz))))))+IKsqr(((x19.value)*(((546.5625)+(((1251.472)*cj2))+(((547.185664)*(cj2*cj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x18.value)*(((0.0013375)+(((0.0011696)*cj2))+(((-1.251472)*sj2))+(((-1.094371328)*cj2*sj2))+(((13.0)*pz))))), ((x19.value)*(((546.5625)+(((1251.472)*cj2))+(((547.185664)*(cj2*cj2)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x20=IKcos(j1);
IkReal x21=IKsin(j1);
IkReal x22=((0.046784)*sj2);
IkReal x23=((1.0)*pz);
IkReal x24=((0.046784)*cj2);
IkReal x25=((0.046784)*x21);
IkReal x26=(pz*x21);
evalcond[0]=((0.0535)+(((-0.026)*x21))+(((-1.0)*x20*x23))+x24);
evalcond[1]=((5.0e-5)+(((-1.0)*x22))+(((-1.0)*x21*x23))+(((0.026)*x20)));
evalcond[2]=((0.026)+(((-1.0)*x21*x24))+(((-1.0)*x20*x22))+(((-0.0535)*x21))+(((5.0e-5)*x20)));
evalcond[3]=((((0.0535)*x20))+(((-1.0)*x23))+(((-1.0)*x21*x22))+((x20*x24))+(((5.0e-5)*x21)));
evalcond[4]=((-0.001337607344)+(((0.002782)*x21))+(((-1.0)*pz*x23))+(((-2.6e-6)*x20))+(((0.0001)*x26))+(((0.107)*pz*x20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x27=IKPowWithIntegerCheck(IKsign(((0.6955)+(((23.392)*pz*sj2))+(((0.608192)*cj2))+(((-0.025)*pz)))),-1);
if(!x27.valid){
continue;
}
CheckValue<IkReal> x28 = IKatan2WithCheck(IkReal(((1.431125)+(((1.094371328)*(cj2*cj2)))+(((-500.0)*(pz*pz)))+(((2.502944)*cj2)))),IkReal(((-0.0013375)+(((1.251472)*sj2))+(((13.0)*pz))+(((1.094371328)*cj2*sj2))+(((-0.0011696)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x28.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x27.value)))+(x28.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x29=IKcos(j1);
IkReal x30=IKsin(j1);
IkReal x31=((0.046784)*sj2);
IkReal x32=((1.0)*pz);
IkReal x33=((0.046784)*cj2);
IkReal x34=((0.046784)*x30);
IkReal x35=(pz*x30);
evalcond[0]=((0.0535)+(((-1.0)*x29*x32))+(((-0.026)*x30))+x33);
evalcond[1]=((5.0e-5)+(((-1.0)*x30*x32))+(((-1.0)*x31))+(((0.026)*x29)));
evalcond[2]=((0.026)+(((-0.0535)*x30))+(((-1.0)*x29*x31))+(((-1.0)*x30*x33))+(((5.0e-5)*x29)));
evalcond[3]=(((x29*x33))+(((0.0535)*x29))+(((-1.0)*x30*x31))+(((-1.0)*x32))+(((5.0e-5)*x30)));
evalcond[4]=((-0.001337607344)+(((0.002782)*x30))+(((-1.0)*pz*x32))+(((0.0001)*x35))+(((-2.6e-6)*x29))+(((0.107)*pz*x29)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x36=((11696.0)*pz);
CheckValue<IkReal> x37=IKPowWithIntegerCheck(IKsign(((169.0)+(((250000.0)*(pz*pz))))),-1);
if(!x37.valid){
continue;
}
CheckValue<IkReal> x38 = IKatan2WithCheck(IkReal(((347.75)+(((12.5)*pz))+(((304.096)*cj2))+(((-1.0)*sj2*x36)))),IkReal(((-0.325)+(((13375.0)*pz))+((cj2*x36))+(((304.096)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x38.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x37.value)))+(x38.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x39=IKcos(j1);
IkReal x40=IKsin(j1);
IkReal x41=((0.046784)*sj2);
IkReal x42=((1.0)*pz);
IkReal x43=((0.046784)*cj2);
IkReal x44=((0.046784)*x40);
IkReal x45=(pz*x40);
evalcond[0]=((0.0535)+(((-1.0)*x39*x42))+(((-0.026)*x40))+x43);
evalcond[1]=((5.0e-5)+(((-1.0)*x41))+(((-1.0)*x40*x42))+(((0.026)*x39)));
evalcond[2]=((0.026)+(((-0.0535)*x40))+(((-1.0)*x39*x41))+(((-1.0)*x40*x43))+(((5.0e-5)*x39)));
evalcond[3]=((((0.0535)*x39))+(((-1.0)*x42))+((x39*x43))+(((-1.0)*x40*x41))+(((5.0e-5)*x40)));
evalcond[4]=((-0.001337607344)+(((-2.6e-6)*x39))+(((-1.0)*pz*x42))+(((0.0001)*x45))+(((0.107)*pz*x39))+(((0.002782)*x40)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-0.876347161614103)+(((199.76466978105)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((-0.876347161614103)+(((199.76466978105)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x46=IKasin(((-0.876347161614103)+(((199.76466978105)*(pz*pz)))));
j2array[0]=((-1.57173090596205)+(((1.0)*x46)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.56986174762774)+(((-1.0)*x46)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x47=pz*pz;
IkReal x48=((11696.0)*pz);
j1eval[0]=((1.0)+(((1479.2899408284)*x47)));
j1eval[1]=IKsign(((169.0)+(((250000.0)*x47))));
j1eval[2]=((IKabs(((347.75)+(((12.5)*pz))+(((304.096)*cj2))+(((-1.0)*sj2*x48)))))+(IKabs(((-0.325)+((cj2*x48))+(((13375.0)*pz))+(((304.096)*sj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x49=(pz*sj2);
j1eval[0]=((27.82)+(((-1.0)*pz))+(((24.32768)*cj2))+(((935.68)*x49)));
j1eval[1]=IKsign(((0.6955)+(((23.392)*x49))+(((0.608192)*cj2))+(((-0.025)*pz))));
j1eval[2]=((IKabs(((-0.0013375)+(((1.251472)*sj2))+(((13.0)*pz))+(((1.094371328)*cj2*sj2))+(((-0.0011696)*cj2)))))+(IKabs(((1.431125)+(((1.094371328)*(cj2*cj2)))+(((-500.0)*(pz*pz)))+(((2.502944)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((1.0)+(((35987.6923076923)*cj2*pz))+(((41153.8461538462)*pz))+(((-935.68)*sj2)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x50=((35987.6923076923)*pz);
IkReal x51=((1.0)+(((41153.8461538462)*pz)));
IkReal x52=((875497.0624)+(((1295113997.63314)*(pz*pz))));
IkReal x59 = x52;
if(IKabs(x59)==0){
continue;
}
IkReal x53=pow(x59,-0.5);
if((x52) < -0.00001)
continue;
IkReal x54=IKabs(IKsqrt(x52));
CheckValue<IkReal> x60=IKPowWithIntegerCheck(x54,-1);
if(!x60.valid){
continue;
}
IkReal x55=x60.value;
if((((1.0)+(((-1.0)*(x51*x51)*(x55*x55))))) < -0.00001)
continue;
IkReal x56=IKsqrt(((1.0)+(((-1.0)*(x51*x51)*(x55*x55)))));
IkReal x57=(x51*x53*x55);
IkReal x58=(x53*x56);
CheckValue<IkReal> x61 = IKatan2WithCheck(IkReal(x50),IkReal(-935.68),IKFAST_ATAN2_MAGTHRESH);
if(!x61.valid){
continue;
}
if( ((x51*x55)) < -1-IKFAST_SINCOS_THRESH || ((x51*x55)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x61.value)))+(((-1.0)*(IKasin((x51*x55))))));
IkReal gconst1=((((935.68)*x57))+(((-1.0)*x50*x58)));
IkReal gconst2=((((-935.68)*x58))+(((-1.0)*x50*x57)));
if((((875497.0624)+(((1295113997.63314)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x63=IKPowWithIntegerCheck(IKabs(IKsqrt(((875497.0624)+(((1295113997.63314)*(pz*pz)))))),-1);
if(!x63.valid){
continue;
}
IkReal x62=x63.value;
CheckValue<IkReal> x64 = IKatan2WithCheck(IkReal(((35987.6923076923)*pz)),IkReal(-935.68),IKFAST_ATAN2_MAGTHRESH);
if(!x64.valid){
continue;
}
if( (((((41153.8461538462)*pz*x62))+x62)) < -1-IKFAST_SINCOS_THRESH || (((((41153.8461538462)*pz*x62))+x62)) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x64.value)+(IKasin(((((41153.8461538462)*pz*x62))+x62)))+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x65=pz*pz;
IkReal x66=((35987.6923076923)*pz);
IkReal x67=((1.0)+(((41153.8461538462)*pz)));
IkReal x68=x52;
IkReal x75 = x68;
if(IKabs(x75)==0){
continue;
}
IkReal x69=pow(x75,-0.5);
if((x68) < -0.00001)
continue;
IkReal x70=IKabs(IKsqrt(x68));
CheckValue<IkReal> x76=IKPowWithIntegerCheck(x70,-1);
if(!x76.valid){
continue;
}
IkReal x71=x76.value;
if((((1.0)+(((-1.0)*(x67*x67)*(x71*x71))))) < -0.00001)
continue;
IkReal x72=IKsqrt(((1.0)+(((-1.0)*(x67*x67)*(x71*x71)))));
IkReal x73=(x67*x69*x71);
IkReal x74=(x69*x72);
px=0;
py=0;
pp=x65;
sj2=gconst1;
cj2=gconst2;
if( ((x71*(((1.0)+(((41152.2633744856)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x71*(((1.0)+(((41152.2633744856)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x77 = IKatan2WithCheck(IkReal(((35984.1669665347)*pz)),IkReal(-935.68),IKFAST_ATAN2_MAGTHRESH);
if(!x77.valid){
continue;
}
j2=((((-1.0)*(IKasin((x71*(((1.0)+(((41152.2633744856)*pz)))))))))+(((-1.0)*(x77.value))));
CheckValue<IkReal> x78 = IKatan2WithCheck(IkReal(x66),IkReal(-935.68),IKFAST_ATAN2_MAGTHRESH);
if(!x78.valid){
continue;
}
if( ((x67*x71)) < -1-IKFAST_SINCOS_THRESH || ((x67*x71)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x78.value)))+(((-1.0)*(IKasin((x67*x71))))));
IkReal gconst1=((((-1.0)*x66*x74))+(((935.68)*x73)));
IkReal gconst2=((((-1.0)*x66*x73))+(((-935.68)*x74)));
IkReal x79=pz*pz;
j1eval[0]=((1.0)+(((1479.2899408284)*x79)));
j1eval[1]=IKsign(((169.0)+(((250000.0)*x79))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x80 = IKatan2WithCheck(IkReal(((1.431125)+(((1.094371328)*(gconst2*gconst2)))+(((-500.0)*(pz*pz)))+(((2.502944)*gconst2)))),IkReal(((-0.0013375)+(((1.094371328)*gconst1*gconst2))+(((1.251472)*gconst1))+(((13.0)*pz))+(((-0.0011696)*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x80.valid){
continue;
}
CheckValue<IkReal> x81=IKPowWithIntegerCheck(IKsign(((0.6955)+(((23.392)*gconst1*pz))+(((0.608192)*gconst2))+(((-0.025)*pz)))),-1);
if(!x81.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x80.value)+(((1.5707963267949)*(x81.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x82=IKcos(j1);
IkReal x83=IKsin(j1);
IkReal x84=((0.046784)*gconst2);
IkReal x85=((1.0)*pz);
IkReal x86=((0.046784)*gconst1);
IkReal x87=(pz*x83);
evalcond[0]=((0.0535)+(((-1.0)*x82*x85))+(((-0.026)*x83))+x84);
evalcond[1]=((5.0e-5)+(((-1.0)*x83*x85))+(((0.026)*x82))+(((-1.0)*x86)));
evalcond[2]=((0.026)+(((-1.0)*x82*x86))+(((-0.0535)*x83))+(((-1.0)*x83*x84))+(((5.0e-5)*x82)));
evalcond[3]=((((-1.0)*x83*x86))+((x82*x84))+(((5.0e-5)*x83))+(((0.0535)*x82))+(((-1.0)*x85)));
evalcond[4]=((-0.001337607344)+(((0.0001)*x87))+(((-2.6e-6)*x82))+(((0.107)*pz*x82))+(((0.002782)*x83))+(((-1.0)*pz*x85)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x88=((11696.0)*pz);
CheckValue<IkReal> x89=IKPowWithIntegerCheck(IKsign(((169.0)+(((250000.0)*(pz*pz))))),-1);
if(!x89.valid){
continue;
}
CheckValue<IkReal> x90 = IKatan2WithCheck(IkReal(((347.75)+(((12.5)*pz))+(((304.096)*gconst2))+(((-1.0)*gconst1*x88)))),IkReal(((-0.325)+(((13375.0)*pz))+(((304.096)*gconst1))+((gconst2*x88)))),IKFAST_ATAN2_MAGTHRESH);
if(!x90.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x89.value)))+(x90.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x91=IKcos(j1);
IkReal x92=IKsin(j1);
IkReal x93=((0.046784)*gconst2);
IkReal x94=((1.0)*pz);
IkReal x95=((0.046784)*gconst1);
IkReal x96=(pz*x92);
evalcond[0]=((0.0535)+(((-1.0)*x91*x94))+(((-0.026)*x92))+x93);
evalcond[1]=((5.0e-5)+(((0.026)*x91))+(((-1.0)*x92*x94))+(((-1.0)*x95)));
evalcond[2]=((0.026)+(((-0.0535)*x92))+(((5.0e-5)*x91))+(((-1.0)*x91*x95))+(((-1.0)*x92*x93)));
evalcond[3]=((((5.0e-5)*x92))+(((0.0535)*x91))+(((-1.0)*x92*x95))+(((-1.0)*x94))+((x91*x93)));
evalcond[4]=((-0.001337607344)+(((-1.0)*pz*x94))+(((0.0001)*x96))+(((-2.6e-6)*x91))+(((0.107)*pz*x91))+(((0.002782)*x92)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x97=((35987.6923076923)*pz);
IkReal x98=((1.0)+(((41153.8461538462)*pz)));
IkReal x99=((875497.0624)+(((1295113997.63314)*(pz*pz))));
IkReal x106 = x99;
if(IKabs(x106)==0){
continue;
}
IkReal x100=pow(x106,-0.5);
if((x99) < -0.00001)
continue;
IkReal x101=IKabs(IKsqrt(x99));
CheckValue<IkReal> x107=IKPowWithIntegerCheck(x101,-1);
if(!x107.valid){
continue;
}
IkReal x102=x107.value;
if((((1.0)+(((-1.0)*(x102*x102)*(x98*x98))))) < -0.00001)
continue;
IkReal x103=IKsqrt(((1.0)+(((-1.0)*(x102*x102)*(x98*x98)))));
IkReal x104=(x100*x102*x98);
IkReal x105=(x100*x103);
CheckValue<IkReal> x108 = IKatan2WithCheck(IkReal(x97),IkReal(-935.68),IKFAST_ATAN2_MAGTHRESH);
if(!x108.valid){
continue;
}
if( ((x102*x98)) < -1-IKFAST_SINCOS_THRESH || ((x102*x98)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x108.value)))+(IKasin((x102*x98))));
IkReal gconst4=((((935.68)*x104))+((x105*x97)));
IkReal gconst5=((((935.68)*x105))+(((-1.0)*x104*x97)));
CheckValue<IkReal> x109 = IKatan2WithCheck(IkReal(((35987.6923076923)*pz)),IkReal(-935.68),IKFAST_ATAN2_MAGTHRESH);
if(!x109.valid){
continue;
}
if((((875497.0624)+(((1295113997.63314)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x110=IKPowWithIntegerCheck(IKabs(IKsqrt(((875497.0624)+(((1295113997.63314)*(pz*pz)))))),-1);
if(!x110.valid){
continue;
}
if( (((x110.value)*(((1.0)+(((41153.8461538462)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x110.value)*(((1.0)+(((41153.8461538462)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x109.value)+j2+(((-1.0)*(IKasin(((x110.value)*(((1.0)+(((41153.8461538462)*pz))))))))))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x111=pz*pz;
IkReal x112=((35987.6923076923)*pz);
IkReal x113=((1.0)+(((41153.8461538462)*pz)));
IkReal x114=x99;
IkReal x121 = x114;
if(IKabs(x121)==0){
continue;
}
IkReal x115=pow(x121,-0.5);
if((x114) < -0.00001)
continue;
IkReal x116=IKabs(IKsqrt(x114));
CheckValue<IkReal> x122=IKPowWithIntegerCheck(x116,-1);
if(!x122.valid){
continue;
}
IkReal x117=x122.value;
if((((1.0)+(((-1.0)*(x113*x113)*(x117*x117))))) < -0.00001)
continue;
IkReal x118=IKsqrt(((1.0)+(((-1.0)*(x113*x113)*(x117*x117)))));
IkReal x119=(x113*x115*x117);
IkReal x120=(x115*x118);
px=0;
py=0;
pp=x111;
sj2=gconst4;
cj2=gconst5;
CheckValue<IkReal> x123 = IKatan2WithCheck(IkReal(((35984.1669665347)*pz)),IkReal(-935.68),IKFAST_ATAN2_MAGTHRESH);
if(!x123.valid){
continue;
}
if( ((x117*(((1.0)+(((41152.2633744856)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x117*(((1.0)+(((41152.2633744856)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((3.14159265)+(((-1.0)*(x123.value)))+(IKasin((x117*(((1.0)+(((41152.2633744856)*pz))))))));
CheckValue<IkReal> x124 = IKatan2WithCheck(IkReal(x112),IkReal(-935.68),IKFAST_ATAN2_MAGTHRESH);
if(!x124.valid){
continue;
}
if( ((x113*x117)) < -1-IKFAST_SINCOS_THRESH || ((x113*x117)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x124.value)))+(IKasin((x113*x117))));
IkReal gconst4=(((x112*x120))+(((935.68)*x119)));
IkReal gconst5=((((-1.0)*x112*x119))+(((935.68)*x120)));
IkReal x125=pz*pz;
j1eval[0]=((1.0)+(((1479.2899408284)*x125)));
j1eval[1]=IKsign(((169.0)+(((250000.0)*x125))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x126 = IKatan2WithCheck(IkReal(((1.431125)+(((1.094371328)*(gconst5*gconst5)))+(((-500.0)*(pz*pz)))+(((2.502944)*gconst5)))),IkReal(((-0.0013375)+(((1.251472)*gconst4))+(((13.0)*pz))+(((1.094371328)*gconst4*gconst5))+(((-0.0011696)*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x126.valid){
continue;
}
CheckValue<IkReal> x127=IKPowWithIntegerCheck(IKsign(((0.6955)+(((23.392)*gconst4*pz))+(((0.608192)*gconst5))+(((-0.025)*pz)))),-1);
if(!x127.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x126.value)+(((1.5707963267949)*(x127.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x128=IKcos(j1);
IkReal x129=IKsin(j1);
IkReal x130=((1.0)*pz);
IkReal x131=((0.046784)*gconst4);
IkReal x132=((0.046784)*gconst5);
IkReal x133=((0.046784)*x129);
evalcond[0]=((0.0535)+x132+(((-1.0)*x128*x130))+(((-0.026)*x129)));
evalcond[1]=((5.0e-5)+(((-1.0)*x131))+(((0.026)*x128))+(((-1.0)*x129*x130)));
evalcond[2]=((0.026)+(((-0.0535)*x129))+(((5.0e-5)*x128))+(((-1.0)*x128*x131))+(((-1.0)*x129*x132)));
evalcond[3]=((((5.0e-5)*x129))+(((0.0535)*x128))+(((-1.0)*x130))+((x128*x132))+(((-1.0)*x129*x131)));
evalcond[4]=((-0.001337607344)+(((-1.0)*pz*x130))+(((0.0001)*pz*x129))+(((0.107)*pz*x128))+(((0.002782)*x129))+(((-2.6e-6)*x128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x134=((11696.0)*pz);
CheckValue<IkReal> x135=IKPowWithIntegerCheck(IKsign(((169.0)+(((250000.0)*(pz*pz))))),-1);
if(!x135.valid){
continue;
}
CheckValue<IkReal> x136 = IKatan2WithCheck(IkReal(((347.75)+(((12.5)*pz))+(((304.096)*gconst5))+(((-1.0)*gconst4*x134)))),IkReal(((-0.325)+(((13375.0)*pz))+((gconst5*x134))+(((304.096)*gconst4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x136.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x135.value)))+(x136.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x137=IKcos(j1);
IkReal x138=IKsin(j1);
IkReal x139=((1.0)*pz);
IkReal x140=((0.046784)*gconst4);
IkReal x141=((0.046784)*gconst5);
IkReal x142=((0.046784)*x138);
evalcond[0]=((0.0535)+(((-1.0)*x137*x139))+x141+(((-0.026)*x138)));
evalcond[1]=((5.0e-5)+(((-1.0)*x140))+(((-1.0)*x138*x139))+(((0.026)*x137)));
evalcond[2]=((0.026)+(((-1.0)*x137*x140))+(((-1.0)*x138*x141))+(((-0.0535)*x138))+(((5.0e-5)*x137)));
evalcond[3]=((((-1.0)*x138*x140))+((x137*x141))+(((5.0e-5)*x138))+(((0.0535)*x137))+(((-1.0)*x139)));
evalcond[4]=((-0.001337607344)+(((-1.0)*pz*x139))+(((0.107)*pz*x137))+(((0.0001)*pz*x138))+(((0.002782)*x138))+(((-2.6e-6)*x137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x143=((27.82)+(((-1.0)*pz)));
IkReal x144=((935.68)*pz);
IkReal x145=((591.8360141824)+(((875497.0624)*(pz*pz))));
if((x145) < -0.00001)
continue;
IkReal x146=IKabs(IKsqrt(x145));
IkReal x153 = x145;
if(IKabs(x153)==0){
continue;
}
IkReal x147=pow(x153,-0.5);
CheckValue<IkReal> x154=IKPowWithIntegerCheck(x146,-1);
if(!x154.valid){
continue;
}
IkReal x148=x154.value;
IkReal x149=(x143*x148);
if((((1.0)+(((-1.0)*(x149*x149))))) < -0.00001)
continue;
IkReal x150=IKsqrt(((1.0)+(((-1.0)*(x149*x149)))));
IkReal x151=(x147*x149);
IkReal x152=(x147*x150);
if( (x149) < -1-IKFAST_SINCOS_THRESH || (x149) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x155 = IKatan2WithCheck(IkReal(24.32768),IkReal(x144),IKFAST_ATAN2_MAGTHRESH);
if(!x155.valid){
continue;
}
IkReal gconst6=((((-1.0)*(IKasin(x149))))+(((-1.0)*(x155.value))));
IkReal gconst7=((((-1.0)*x144*x151))+(((-24.32768)*x152)));
IkReal gconst8=(((x144*x152))+(((-24.32768)*x151)));
if((((591.8360141824)+(((875497.0624)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x157=IKPowWithIntegerCheck(IKabs(IKsqrt(((591.8360141824)+(((875497.0624)*(pz*pz)))))),-1);
if(!x157.valid){
continue;
}
IkReal x156=x157.value;
CheckValue<IkReal> x158 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x158.valid){
continue;
}
if( (((((-1.0)*pz*x156))+(((27.82)*x156)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.0)*pz*x156))+(((27.82)*x156)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x159 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x159.valid){
continue;
}
CheckValue<IkReal> x160 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x160.valid){
continue;
}
if( (((((-1.0)*pz*x156))+(((27.82)*x156)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.0)*pz*x156))+(((27.82)*x156)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if( (((((-1.0)*pz*x156))+(((27.82)*x156)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.0)*pz*x156))+(((27.82)*x156)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if( (((((-1.0)*pz*x156))+(((27.82)*x156)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.0)*pz*x156))+(((27.82)*x156)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x161 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x161.valid){
continue;
}
CheckValue<IkReal> x162 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x162.valid){
continue;
}
if( (((((-1.0)*pz*x156))+(((27.82)*x156)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.0)*pz*x156))+(((27.82)*x156)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if( (((((-1.0)*pz*x156))+(((27.82)*x156)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.0)*pz*x156))+(((27.82)*x156)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x163 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x163.valid){
continue;
}
if((((((x158.value)*(IKasin(((((-1.0)*pz*x156))+(((27.82)*x156)))))))+(((x159.value)*(j2)))+((j2*(x160.value)))+((j2*(j2)))+(((IKasin(((((-1.0)*pz*x156))+(((27.82)*x156)))))*(j2)))+(((IKasin(((((-1.0)*pz*x156))+(((27.82)*x156)))))*(IKasin(((((-1.0)*pz*x156))+(((27.82)*x156)))))))+(((x161.value)*(x162.value)))+((j2*(IKasin(((((-1.0)*pz*x156))+(((27.82)*x156)))))))+(((IKasin(((((-1.0)*pz*x156))+(((27.82)*x156)))))*(x163.value))))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((((x158.value)*(IKasin(((((-1.0)*pz*x156))+(((27.82)*x156)))))))+(((x159.value)*(j2)))+((j2*(x160.value)))+((j2*(j2)))+(((IKasin(((((-1.0)*pz*x156))+(((27.82)*x156)))))*(j2)))+(((IKasin(((((-1.0)*pz*x156))+(((27.82)*x156)))))*(IKasin(((((-1.0)*pz*x156))+(((27.82)*x156)))))))+(((x161.value)*(x162.value)))+((j2*(IKasin(((((-1.0)*pz*x156))+(((27.82)*x156)))))))+(((IKasin(((((-1.0)*pz*x156))+(((27.82)*x156)))))*(x163.value))))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x164=pz*pz;
IkReal x165=((27.82)+(((-1.0)*pz)));
IkReal x166=((935.68)*pz);
IkReal x167=x145;
if((x167) < -0.00001)
continue;
IkReal x168=IKabs(IKsqrt(x167));
IkReal x176 = x167;
if(IKabs(x176)==0){
continue;
}
IkReal x169=pow(x176,-0.5);
CheckValue<IkReal> x177=IKPowWithIntegerCheck(x168,-1);
if(!x177.valid){
continue;
}
IkReal x170=x177.value;
IkReal x171=(x165*x170);
CheckValue<IkReal> x178 = IKatan2WithCheck(IkReal(24.32768),IkReal(x166),IKFAST_ATAN2_MAGTHRESH);
if(!x178.valid){
continue;
}
if( (x171) < -1-IKFAST_SINCOS_THRESH || (x171) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x172=((((-1.0)*(x178.value)))+(((-1.0)*(IKasin(x171)))));
if((((1.0)+(((-1.0)*(x171*x171))))) < -0.00001)
continue;
IkReal x173=IKsqrt(((1.0)+(((-1.0)*(x171*x171)))));
IkReal x174=(x169*x171);
IkReal x175=(x169*x173);
px=0;
py=0;
pp=x164;
sj2=gconst7;
cj2=gconst8;
j2=x172;
IkReal gconst6=x172;
IkReal gconst7=((((-24.32768)*x175))+(((-1.0)*x166*x174)));
IkReal gconst8=(((x166*x175))+(((-24.32768)*x174)));
IkReal x179=pz*pz;
j1eval[0]=((1.0)+(((1479.2899408284)*x179)));
j1eval[1]=IKsign(((169.0)+(((250000.0)*x179))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x180 = IKatan2WithCheck(IkReal(((0.0013375)+(((-1.251472)*gconst7))+(((0.0011696)*gconst8))+(((-1.094371328)*gconst7*gconst8))+(((13.0)*pz)))),IkReal(((-1.25e-6)+(((-1.094371328)*(gconst7*gconst7)))+(((500.0)*(pz*pz)))+(((0.0023392)*gconst7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x180.valid){
continue;
}
CheckValue<IkReal> x181=IKPowWithIntegerCheck(IKsign(((0.00065)+(((23.392)*gconst8*pz))+(((-0.608192)*gconst7))+(((26.75)*pz)))),-1);
if(!x181.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x180.value)+(((1.5707963267949)*(x181.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x182=IKcos(j1);
IkReal x183=IKsin(j1);
IkReal x184=((0.046784)*gconst8);
IkReal x185=((0.046784)*gconst7);
IkReal x186=(pz*x182);
IkReal x187=(pz*x183);
evalcond[0]=((0.0535)+(((-0.026)*x183))+(((-1.0)*x186))+x184);
evalcond[1]=((5.0e-5)+(((-1.0)*x185))+(((-1.0)*x187))+(((0.026)*x182)));
evalcond[2]=((0.026)+(((5.0e-5)*x182))+(((-0.0535)*x183))+(((-1.0)*x183*x184))+(((-1.0)*x182*x185)));
evalcond[3]=((((-1.0)*pz))+(((5.0e-5)*x183))+(((0.0535)*x182))+(((-1.0)*x183*x185))+((x182*x184)));
evalcond[4]=((-0.001337607344)+(((0.002782)*x183))+(((-2.6e-6)*x182))+(((0.107)*x186))+(((0.0001)*x187))+(((-1.0)*(pz*pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x188=((11696.0)*pz);
CheckValue<IkReal> x189=IKPowWithIntegerCheck(IKsign(((169.0)+(((250000.0)*(pz*pz))))),-1);
if(!x189.valid){
continue;
}
CheckValue<IkReal> x190 = IKatan2WithCheck(IkReal(((347.75)+(((12.5)*pz))+(((304.096)*gconst8))+(((-1.0)*gconst7*x188)))),IkReal(((-0.325)+(((13375.0)*pz))+(((304.096)*gconst7))+((gconst8*x188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x190.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x189.value)))+(x190.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x191=IKcos(j1);
IkReal x192=IKsin(j1);
IkReal x193=((0.046784)*gconst8);
IkReal x194=((0.046784)*gconst7);
IkReal x195=(pz*x191);
IkReal x196=(pz*x192);
evalcond[0]=((0.0535)+(((-0.026)*x192))+(((-1.0)*x195))+x193);
evalcond[1]=((5.0e-5)+(((-1.0)*x196))+(((-1.0)*x194))+(((0.026)*x191)));
evalcond[2]=((0.026)+(((-1.0)*x192*x193))+(((-1.0)*x191*x194))+(((5.0e-5)*x191))+(((-0.0535)*x192)));
evalcond[3]=((((-1.0)*x192*x194))+(((5.0e-5)*x192))+(((-1.0)*pz))+(((0.0535)*x191))+((x191*x193)));
evalcond[4]=((-0.001337607344)+(((0.002782)*x192))+(((-2.6e-6)*x191))+(((0.107)*x195))+(((0.0001)*x196))+(((-1.0)*(pz*pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x197=((27.82)+(((-1.0)*pz)));
IkReal x198=((935.68)*pz);
IkReal x199=x197*x197;
IkReal x200=((591.8360141824)+(((875497.0624)*(pz*pz))));
if((x200) < -0.00001)
continue;
IkReal x201=IKabs(IKsqrt(x200));
IkReal x209 = x200;
if(IKabs(x209)==0){
continue;
}
IkReal x202=pow(x209,-0.5);
IkReal x203=((24.32768)*x202);
CheckValue<IkReal> x210=IKPowWithIntegerCheck(x201,-1);
if(!x210.valid){
continue;
}
IkReal x204=x210.value;
CheckValue<IkReal> x211=IKPowWithIntegerCheck(x201,-2);
if(!x211.valid){
continue;
}
IkReal x205=x211.value;
IkReal x206=(x197*x204);
IkReal x207=(x199*x205);
IkReal x208=(x202*x206);
if( (x206) < -1-IKFAST_SINCOS_THRESH || (x206) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x212 = IKatan2WithCheck(IkReal(24.32768),IkReal(x198),IKFAST_ATAN2_MAGTHRESH);
if(!x212.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(IKasin(x206))+(((-1.0)*(x212.value))));
if((((1.0)+(((-1.0)*x207)))) < -0.00001)
continue;
IkReal gconst10=(((x203*(IKsqrt(((1.0)+(((-1.0)*x207)))))))+(((-1.0)*x198*x208)));
if((((1.0)+(((-1.0)*x207)))) < -0.00001)
continue;
IkReal gconst11=((((-1.0)*x203*x206))+(((-1.0)*x198*x202*(IKsqrt(((1.0)+(((-1.0)*x207))))))));
CheckValue<IkReal> x213 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x213.valid){
continue;
}
CheckValue<IkReal> x214 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x214.valid){
continue;
}
CheckValue<IkReal> x215 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x215.valid){
continue;
}
if((((591.8360141824)+(((875497.0624)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x216=IKPowWithIntegerCheck(IKabs(IKsqrt(((591.8360141824)+(((875497.0624)*(pz*pz)))))),-1);
if(!x216.valid){
continue;
}
if( (((x216.value)*(((27.82)+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x216.value)*(((27.82)+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if((((591.8360141824)+(((875497.0624)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x217=IKPowWithIntegerCheck(IKabs(IKsqrt(((591.8360141824)+(((875497.0624)*(pz*pz)))))),-1);
if(!x217.valid){
continue;
}
if( (((x217.value)*(((27.82)+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x217.value)*(((27.82)+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if((((591.8360141824)+(((875497.0624)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x218=IKPowWithIntegerCheck(IKabs(IKsqrt(((591.8360141824)+(((875497.0624)*(pz*pz)))))),-1);
if(!x218.valid){
continue;
}
if( (((x218.value)*(((27.82)+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x218.value)*(((27.82)+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x219 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x219.valid){
continue;
}
CheckValue<IkReal> x220 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x220.valid){
continue;
}
CheckValue<IkReal> x221 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x221.valid){
continue;
}
CheckValue<IkReal> x222 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x222.valid){
continue;
}
if((((591.8360141824)+(((875497.0624)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x223=IKPowWithIntegerCheck(IKabs(IKsqrt(((591.8360141824)+(((875497.0624)*(pz*pz)))))),-1);
if(!x223.valid){
continue;
}
if( (((x223.value)*(((27.82)+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x223.value)*(((27.82)+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if((((591.8360141824)+(((875497.0624)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x224=IKPowWithIntegerCheck(IKabs(IKsqrt(((591.8360141824)+(((875497.0624)*(pz*pz)))))),-1);
if(!x224.valid){
continue;
}
if( (((x224.value)*(((27.82)+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x224.value)*(((27.82)+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if((((591.8360141824)+(((875497.0624)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x225=IKPowWithIntegerCheck(IKabs(IKsqrt(((591.8360141824)+(((875497.0624)*(pz*pz)))))),-1);
if(!x225.valid){
continue;
}
if( (((x225.value)*(((27.82)+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x225.value)*(((27.82)+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if((((591.8360141824)+(((875497.0624)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x226=IKPowWithIntegerCheck(IKabs(IKsqrt(((591.8360141824)+(((875497.0624)*(pz*pz)))))),-1);
if(!x226.valid){
continue;
}
if( (((x226.value)*(((27.82)+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x226.value)*(((27.82)+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x227 = IKatan2WithCheck(IkReal(24.32768),IkReal(((935.68)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x227.valid){
continue;
}
if((((591.8360141824)+(((875497.0624)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x228=IKPowWithIntegerCheck(IKabs(IKsqrt(((591.8360141824)+(((875497.0624)*(pz*pz)))))),-1);
if(!x228.valid){
continue;
}
if( (((x228.value)*(((27.82)+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x228.value)*(((27.82)+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if((((9.86960440108936)+(((-3.14159265358979)*(x213.value)))+(((-3.14159265358979)*(j2)))+(((x214.value)*(j2)))+((j2*(x215.value)))+((j2*(j2)))+(((3.14159265358979)*(IKasin(((x216.value)*(((27.82)+(((-1.0)*pz)))))))))+(((1.0)*(IKasin(((x217.value)*(((27.82)+(((-1.0)*pz)))))))*(IKasin(((x218.value)*(((27.82)+(((-1.0)*pz)))))))))+(((-3.14159265358979)*(x219.value)))+(((x220.value)*(x221.value)))+(((-1.0)*(x222.value)*(IKasin(((x223.value)*(((27.82)+(((-1.0)*pz)))))))))+(((-3.14159265358979)*j2))+(((-1.0)*(IKasin(((x224.value)*(((27.82)+(((-1.0)*pz)))))))*(j2)))+(((-1.0)*j2*(IKasin(((x225.value)*(((27.82)+(((-1.0)*pz)))))))))+(((-1.0)*(IKasin(((x226.value)*(((27.82)+(((-1.0)*pz)))))))*(x227.value)))+(((3.14159265358979)*(IKasin(((x228.value)*(((27.82)+(((-1.0)*pz))))))))))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((-3.14159265358979)*(x213.value)))+(((-3.14159265358979)*(j2)))+(((x214.value)*(j2)))+((j2*(x215.value)))+((j2*(j2)))+(((3.14159265358979)*(IKasin(((x216.value)*(((27.82)+(((-1.0)*pz)))))))))+(((1.0)*(IKasin(((x217.value)*(((27.82)+(((-1.0)*pz)))))))*(IKasin(((x218.value)*(((27.82)+(((-1.0)*pz)))))))))+(((-3.14159265358979)*(x219.value)))+(((x220.value)*(x221.value)))+(((-1.0)*(x222.value)*(IKasin(((x223.value)*(((27.82)+(((-1.0)*pz)))))))))+(((-3.14159265358979)*j2))+(((-1.0)*(IKasin(((x224.value)*(((27.82)+(((-1.0)*pz)))))))*(j2)))+(((-1.0)*j2*(IKasin(((x225.value)*(((27.82)+(((-1.0)*pz)))))))))+(((-1.0)*(IKasin(((x226.value)*(((27.82)+(((-1.0)*pz)))))))*(x227.value)))+(((3.14159265358979)*(IKasin(((x228.value)*(((27.82)+(((-1.0)*pz))))))))))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x229=pz*pz;
IkReal x230=((27.82)+(((-1.0)*pz)));
IkReal x231=((935.68)*pz);
IkReal x232=x230*x230;
CheckValue<IkReal> x244 = IKatan2WithCheck(IkReal(24.32768),IkReal(x231),IKFAST_ATAN2_MAGTHRESH);
if(!x244.valid){
continue;
}
IkReal x233=((1.0)*(x244.value));
IkReal x234=x200;
if((x234) < -0.00001)
continue;
IkReal x235=IKabs(IKsqrt(x234));
IkReal x245 = x234;
if(IKabs(x245)==0){
continue;
}
IkReal x236=pow(x245,-0.5);
IkReal x237=((24.32768)*x236);
CheckValue<IkReal> x246=IKPowWithIntegerCheck(x235,-1);
if(!x246.valid){
continue;
}
IkReal x238=x246.value;
CheckValue<IkReal> x247=IKPowWithIntegerCheck(x235,-2);
if(!x247.valid){
continue;
}
IkReal x239=x247.value;
IkReal x240=(x230*x238);
if( (x240) < -1-IKFAST_SINCOS_THRESH || (x240) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x241=IKasin(x240);
IkReal x242=(x232*x239);
IkReal x243=(x236*x240);
px=0;
py=0;
pp=x229;
sj2=gconst10;
cj2=gconst11;
j2=((3.14159265)+(((-1.0)*x233))+x241);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x233))+x241);
if((((1.0)+(((-1.0)*x242)))) < -0.00001)
continue;
IkReal gconst10=((((-1.0)*x231*x243))+((x237*(IKsqrt(((1.0)+(((-1.0)*x242))))))));
if((((1.0)+(((-1.0)*x242)))) < -0.00001)
continue;
IkReal gconst11=((((-1.0)*x231*x236*(IKsqrt(((1.0)+(((-1.0)*x242)))))))+(((-1.0)*x237*x240)));
IkReal x248=pz*pz;
j1eval[0]=((1.0)+(((1479.2899408284)*x248)));
j1eval[1]=IKsign(((169.0)+(((250000.0)*x248))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x249=IKPowWithIntegerCheck(IKsign(((0.6955)+(((23.392)*gconst10*pz))+(((0.608192)*gconst11))+(((-0.025)*pz)))),-1);
if(!x249.valid){
continue;
}
CheckValue<IkReal> x250 = IKatan2WithCheck(IkReal(((1.431125)+(((-500.0)*(pz*pz)))+(((1.094371328)*(gconst11*gconst11)))+(((2.502944)*gconst11)))),IkReal(((-0.0013375)+(((1.094371328)*gconst10*gconst11))+(((13.0)*pz))+(((1.251472)*gconst10))+(((-0.0011696)*gconst11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x250.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x249.value)))+(x250.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x251=IKcos(j1);
IkReal x252=IKsin(j1);
IkReal x253=((0.046784)*gconst11);
IkReal x254=((0.046784)*gconst10);
IkReal x255=((1.0)*pz);
IkReal x256=(pz*x252);
evalcond[0]=((0.0535)+(((-1.0)*x251*x255))+x253+(((-0.026)*x252)));
evalcond[1]=((5.0e-5)+(((-1.0)*x252*x255))+(((0.026)*x251))+(((-1.0)*x254)));
evalcond[2]=((0.026)+(((-1.0)*x252*x253))+(((5.0e-5)*x251))+(((-1.0)*x251*x254))+(((-0.0535)*x252)));
evalcond[3]=((((-1.0)*x252*x254))+(((5.0e-5)*x252))+((x251*x253))+(((0.0535)*x251))+(((-1.0)*x255)));
evalcond[4]=((-0.001337607344)+(((0.002782)*x252))+(((0.107)*pz*x251))+(((-2.6e-6)*x251))+(((-1.0)*pz*x255))+(((0.0001)*x256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x257=((11696.0)*pz);
CheckValue<IkReal> x258 = IKatan2WithCheck(IkReal(((347.75)+(((12.5)*pz))+(((304.096)*gconst11))+(((-1.0)*gconst10*x257)))),IkReal(((-0.325)+(((13375.0)*pz))+(((304.096)*gconst10))+((gconst11*x257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x258.valid){
continue;
}
CheckValue<IkReal> x259=IKPowWithIntegerCheck(IKsign(((169.0)+(((250000.0)*(pz*pz))))),-1);
if(!x259.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x258.value)+(((1.5707963267949)*(x259.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x260=IKcos(j1);
IkReal x261=IKsin(j1);
IkReal x262=((0.046784)*gconst11);
IkReal x263=((0.046784)*gconst10);
IkReal x264=((1.0)*pz);
IkReal x265=(pz*x261);
evalcond[0]=((0.0535)+(((-0.026)*x261))+x262+(((-1.0)*x260*x264)));
evalcond[1]=((5.0e-5)+(((0.026)*x260))+(((-1.0)*x261*x264))+(((-1.0)*x263)));
evalcond[2]=((0.026)+(((-1.0)*x261*x262))+(((5.0e-5)*x260))+(((-0.0535)*x261))+(((-1.0)*x260*x263)));
evalcond[3]=(((x260*x262))+(((-1.0)*x261*x263))+(((5.0e-5)*x261))+(((-1.0)*x264))+(((0.0535)*x260)));
evalcond[4]=((-0.001337607344)+(((0.0001)*x265))+(((-2.6e-6)*x260))+(((0.002782)*x261))+(((0.107)*pz*x260))+(((-1.0)*pz*x264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x266=(cj2*pz);
CheckValue<IkReal> x267=IKPowWithIntegerCheck(((0.00065)+(((-0.608192)*sj2))+(((26.75)*pz))+(((23.392)*x266))),-1);
if(!x267.valid){
continue;
}
CheckValue<IkReal> x268=IKPowWithIntegerCheck(((0.325)+(((-304.096)*sj2))+(((13375.0)*pz))+(((11696.0)*x266))),-1);
if(!x268.valid){
continue;
}
if( IKabs(((x267.value)*(((0.0013375)+(((0.0011696)*cj2))+(((-1.251472)*sj2))+(((-1.094371328)*cj2*sj2))+(((13.0)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x268.value)*(((546.5625)+(((1251.472)*cj2))+(((547.185664)*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x267.value)*(((0.0013375)+(((0.0011696)*cj2))+(((-1.251472)*sj2))+(((-1.094371328)*cj2*sj2))+(((13.0)*pz))))))+IKsqr(((x268.value)*(((546.5625)+(((1251.472)*cj2))+(((547.185664)*(cj2*cj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x267.value)*(((0.0013375)+(((0.0011696)*cj2))+(((-1.251472)*sj2))+(((-1.094371328)*cj2*sj2))+(((13.0)*pz))))), ((x268.value)*(((546.5625)+(((1251.472)*cj2))+(((547.185664)*(cj2*cj2)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x269=IKcos(j1);
IkReal x270=IKsin(j1);
IkReal x271=((0.046784)*sj2);
IkReal x272=((1.0)*pz);
IkReal x273=((0.046784)*cj2);
IkReal x274=((0.046784)*x270);
IkReal x275=(pz*x270);
evalcond[0]=((0.0535)+(((-0.026)*x270))+(((-1.0)*x269*x272))+x273);
evalcond[1]=((5.0e-5)+(((0.026)*x269))+(((-1.0)*x271))+(((-1.0)*x270*x272)));
evalcond[2]=((0.026)+(((-1.0)*x269*x271))+(((5.0e-5)*x269))+(((-0.0535)*x270))+(((-1.0)*x270*x273)));
evalcond[3]=((((-1.0)*x272))+(((5.0e-5)*x270))+(((-1.0)*x270*x271))+((x269*x273))+(((0.0535)*x269)));
evalcond[4]=((-0.001337607344)+(((-1.0)*pz*x272))+(((-2.6e-6)*x269))+(((0.0001)*x275))+(((0.002782)*x270))+(((0.107)*pz*x269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x276=IKPowWithIntegerCheck(IKsign(((0.6955)+(((23.392)*pz*sj2))+(((0.608192)*cj2))+(((-0.025)*pz)))),-1);
if(!x276.valid){
continue;
}
CheckValue<IkReal> x277 = IKatan2WithCheck(IkReal(((1.431125)+(((1.094371328)*(cj2*cj2)))+(((-500.0)*(pz*pz)))+(((2.502944)*cj2)))),IkReal(((-0.0013375)+(((1.251472)*sj2))+(((13.0)*pz))+(((1.094371328)*cj2*sj2))+(((-0.0011696)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x277.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x276.value)))+(x277.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x278=IKcos(j1);
IkReal x279=IKsin(j1);
IkReal x280=((0.046784)*sj2);
IkReal x281=((1.0)*pz);
IkReal x282=((0.046784)*cj2);
IkReal x283=((0.046784)*x279);
IkReal x284=(pz*x279);
evalcond[0]=((0.0535)+(((-0.026)*x279))+x282+(((-1.0)*x278*x281)));
evalcond[1]=((5.0e-5)+(((0.026)*x278))+(((-1.0)*x280))+(((-1.0)*x279*x281)));
evalcond[2]=((0.026)+(((5.0e-5)*x278))+(((-0.0535)*x279))+(((-1.0)*x279*x282))+(((-1.0)*x278*x280)));
evalcond[3]=((((0.0535)*x278))+((x278*x282))+(((-1.0)*x281))+(((5.0e-5)*x279))+(((-1.0)*x279*x280)));
evalcond[4]=((-0.001337607344)+(((-2.6e-6)*x278))+(((0.002782)*x279))+(((0.0001)*x284))+(((0.107)*pz*x278))+(((-1.0)*pz*x281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x285=((11696.0)*pz);
CheckValue<IkReal> x286=IKPowWithIntegerCheck(IKsign(((169.0)+(((250000.0)*(pz*pz))))),-1);
if(!x286.valid){
continue;
}
CheckValue<IkReal> x287 = IKatan2WithCheck(IkReal(((347.75)+(((12.5)*pz))+(((-1.0)*sj2*x285))+(((304.096)*cj2)))),IkReal(((-0.325)+(((13375.0)*pz))+((cj2*x285))+(((304.096)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x287.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x286.value)))+(x287.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x288=IKcos(j1);
IkReal x289=IKsin(j1);
IkReal x290=((0.046784)*sj2);
IkReal x291=((1.0)*pz);
IkReal x292=((0.046784)*cj2);
IkReal x293=((0.046784)*x289);
IkReal x294=(pz*x289);
evalcond[0]=((0.0535)+(((-0.026)*x289))+x292+(((-1.0)*x288*x291)));
evalcond[1]=((5.0e-5)+(((-1.0)*x289*x291))+(((-1.0)*x290))+(((0.026)*x288)));
evalcond[2]=((0.026)+(((-1.0)*x289*x292))+(((-0.0535)*x289))+(((5.0e-5)*x288))+(((-1.0)*x288*x290)));
evalcond[3]=((((-1.0)*x289*x290))+(((-1.0)*x291))+(((5.0e-5)*x289))+(((0.0535)*x288))+((x288*x292)));
evalcond[4]=((-0.001337607344)+(((0.0001)*x294))+(((-1.0)*pz*x291))+(((-2.6e-6)*x288))+(((0.002782)*x289))+(((0.107)*pz*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x297 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x297.valid){
continue;
}
IkReal x295=((1.0)*(x297.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x298=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x298.valid){
continue;
}
if( (((0.00345)*(x298.value))) < -1-IKFAST_SINCOS_THRESH || (((0.00345)*(x298.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x296=IKasin(((0.00345)*(x298.value)));
j0array[0]=((((-1.0)*x296))+(((-1.0)*x295)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x295))+x296);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((0.876347161614103)+(((-199.76466978105)*(px*px)))+(((-199.76466978105)*(pz*pz)))+(((-199.76466978105)*(py*py)))+(((10.3877628286146)*py*sj0))+(((10.3877628286146)*cj0*px)))) < -1-IKFAST_SINCOS_THRESH || (((0.876347161614103)+(((-199.76466978105)*(px*px)))+(((-199.76466978105)*(pz*pz)))+(((-199.76466978105)*(py*py)))+(((10.3877628286146)*py*sj0))+(((10.3877628286146)*cj0*px)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x299=IKasin(((0.876347161614103)+(((-199.76466978105)*(px*px)))+(((-199.76466978105)*(pz*pz)))+(((-199.76466978105)*(py*py)))+(((10.3877628286146)*py*sj0))+(((10.3877628286146)*cj0*px))));
j2array[0]=((-1.57173090596205)+(((-1.0)*x299)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.56986174762774)+x299);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
IkReal x300=(py*sj0);
IkReal x301=((0.046784)*cj2);
IkReal x302=(cj0*px);
IkReal x303=((935.68)*cj2);
IkReal x304=(pz*sj2);
j1eval[0]=((-27.82)+(((1070.0)*x300))+(((1070.0)*x302))+pz+((x302*x303))+(((-935.68)*x304))+((x300*x303))+(((-24.32768)*cj2)));
j1eval[1]=IKsign(((-0.001391)+(((0.0535)*x300))+(((0.0535)*x302))+((x301*x302))+(((5.0e-5)*pz))+(((-0.001216384)*cj2))+(((-0.046784)*x304))+((x300*x301))));
j1eval[2]=((IKabs(((2.675e-6)+(((-0.026)*pz))+(((-0.002502944)*sj2))+(((-0.002188742656)*cj2*sj2))+((pz*x300))+((pz*x302))+(((2.3392e-6)*cj2)))))+(IKabs(((-0.00286225)+(((-0.002188742656)*(cj2*cj2)))+(pz*pz)+(((-0.005005888)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x305=(cj0*px);
IkReal x306=((35987.6923076923)*sj2);
IkReal x307=(cj2*pz);
IkReal x308=((0.046784)*sj2);
IkReal x309=(py*sj0);
IkReal x310=((1.0)*pz);
j1eval[0]=((1.0)+(((35987.6923076923)*x307))+(((-38.4615384615385)*x305))+(((-38.4615384615385)*x309))+((x305*x306))+(((41153.8461538462)*pz))+(((-935.68)*sj2))+((x306*x309)));
j1eval[1]=((IKabs(((-0.002188745156)+(((4.6784e-6)*sj2))+(((0.002188742656)*(cj2*cj2)))+(pz*pz))))+(IKabs(((2.675e-6)+(((-1.0)*x305*x310))+(((-0.002502944)*sj2))+(((-1.0)*x309*x310))+(((-0.002188742656)*cj2*sj2))+(((0.026)*pz))+(((2.3392e-6)*cj2))))));
j1eval[2]=IKsign(((1.3e-6)+(((0.046784)*x307))+((x308*x309))+(((-0.001216384)*sj2))+((x305*x308))+(((0.0535)*pz))+(((-5.0e-5)*x305))+(((-5.0e-5)*x309))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=((-1079.64157746238)+sj2+(((-1070.0)*cj2)));
j1eval[1]=IKsign(((-0.005050995156)+(((4.6784e-6)*sj2))+(((-0.005005888)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x311=(py*sj0);
IkReal x312=(cj0*px);
IkReal x313=((0.046784)*cj2);
IkReal x314=((0.046784)*sj2);
CheckValue<IkReal> x315 = IKatan2WithCheck(IkReal(((-0.001391)+((x312*x313))+(((-5.0e-5)*pz))+(((-0.001216384)*cj2))+((x311*x313))+((pz*x314))+(((0.0535)*x312))+(((0.0535)*x311)))),IkReal(((1.3e-6)+(((-5.0e-5)*x312))+(((-5.0e-5)*x311))+((x312*x314))+(((-0.0535)*pz))+((x311*x314))+(((-1.0)*pz*x313))+(((-0.001216384)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x315.valid){
continue;
}
CheckValue<IkReal> x316=IKPowWithIntegerCheck(IKsign(((-0.005050995156)+(((4.6784e-6)*sj2))+(((-0.005005888)*cj2)))),-1);
if(!x316.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x315.value)+(((1.5707963267949)*(x316.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x317=IKcos(j1);
IkReal x318=IKsin(j1);
IkReal x319=(cj0*px);
IkReal x320=((0.046784)*cj2);
IkReal x321=(py*sj0);
IkReal x322=((1.0)*pz);
IkReal x323=((0.046784)*sj2);
IkReal x324=((1.0)*x317);
IkReal x325=((0.107)*x318);
IkReal x326=((0.0001)*x317);
evalcond[0]=((((-1.0)*x322))+(((5.0e-5)*x318))+((x317*x320))+(((-1.0)*x318*x323))+(((0.0535)*x317)));
evalcond[1]=((0.0535)+((x318*x321))+(((-1.0)*x317*x322))+x320+(((-0.026)*x318))+((x318*x319)));
evalcond[2]=((5.0e-5)+(((0.026)*x317))+(((-1.0)*x321*x324))+(((-1.0)*x323))+(((-1.0)*x319*x324))+(((-1.0)*x318*x322)));
evalcond[3]=((0.026)+(((-1.0)*x317*x323))+(((-1.0)*x321))+(((-0.0535)*x318))+(((5.0e-5)*x317))+(((-1.0)*x318*x320))+(((-1.0)*x319)));
evalcond[4]=((-0.001337607344)+(((-1.0)*(px*px)))+(((-2.6e-6)*x317))+(((-1.0)*x321*x325))+(((0.107)*pz*x317))+(((0.002782)*x318))+(((-1.0)*x319*x325))+(((0.0001)*pz*x318))+(((0.052)*x321))+(((-1.0)*(py*py)))+(((-1.0)*pz*x322))+(((0.052)*x319))+((x321*x326))+((x319*x326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x327=(cj0*px);
IkReal x328=((0.046784)*sj2);
IkReal x329=(py*sj0);
IkReal x330=((1.0)*pz);
CheckValue<IkReal> x331=IKPowWithIntegerCheck(IKsign(((1.3e-6)+(((0.046784)*cj2*pz))+((x328*x329))+((x327*x328))+(((-0.001216384)*sj2))+(((-5.0e-5)*x327))+(((-5.0e-5)*x329))+(((0.0535)*pz)))),-1);
if(!x331.valid){
continue;
}
CheckValue<IkReal> x332 = IKatan2WithCheck(IkReal(((2.675e-6)+(((-1.0)*x329*x330))+(((-0.002502944)*sj2))+(((-1.0)*x327*x330))+(((-0.002188742656)*cj2*sj2))+(((0.026)*pz))+(((2.3392e-6)*cj2)))),IkReal(((-0.002188745156)+(((4.6784e-6)*sj2))+(((0.002188742656)*(cj2*cj2)))+(pz*pz))),IKFAST_ATAN2_MAGTHRESH);
if(!x332.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x331.value)))+(x332.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x333=IKcos(j1);
IkReal x334=IKsin(j1);
IkReal x335=(cj0*px);
IkReal x336=((0.046784)*cj2);
IkReal x337=(py*sj0);
IkReal x338=((1.0)*pz);
IkReal x339=((0.046784)*sj2);
IkReal x340=((1.0)*x333);
IkReal x341=((0.107)*x334);
IkReal x342=((0.0001)*x333);
evalcond[0]=(((x333*x336))+(((-1.0)*x338))+(((5.0e-5)*x334))+(((0.0535)*x333))+(((-1.0)*x334*x339)));
evalcond[1]=((0.0535)+((x334*x335))+((x334*x337))+(((-0.026)*x334))+(((-1.0)*x333*x338))+x336);
evalcond[2]=((5.0e-5)+(((-1.0)*x335*x340))+(((0.026)*x333))+(((-1.0)*x337*x340))+(((-1.0)*x339))+(((-1.0)*x334*x338)));
evalcond[3]=((0.026)+(((-1.0)*x333*x339))+(((-1.0)*x337))+(((-1.0)*x335))+(((-0.0535)*x334))+(((5.0e-5)*x333))+(((-1.0)*x334*x336)));
evalcond[4]=((-0.001337607344)+((x335*x342))+(((-1.0)*x335*x341))+(((-1.0)*(px*px)))+(((0.002782)*x334))+((x337*x342))+(((0.052)*x335))+(((0.052)*x337))+(((0.107)*pz*x333))+(((-1.0)*x337*x341))+(((-1.0)*pz*x338))+(((-2.6e-6)*x333))+(((0.0001)*pz*x334))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x343=(py*sj0);
IkReal x344=((0.046784)*cj2);
IkReal x345=(cj0*px);
CheckValue<IkReal> x346=IKPowWithIntegerCheck(IKsign(((-0.001391)+(((5.0e-5)*pz))+(((-0.046784)*pz*sj2))+((x344*x345))+(((-0.001216384)*cj2))+(((0.0535)*x343))+(((0.0535)*x345))+((x343*x344)))),-1);
if(!x346.valid){
continue;
}
CheckValue<IkReal> x347 = IKatan2WithCheck(IkReal(((-0.00286225)+(((-0.002188742656)*(cj2*cj2)))+(pz*pz)+(((-0.005005888)*cj2)))),IkReal(((2.675e-6)+(((-0.026)*pz))+((pz*x345))+((pz*x343))+(((-0.002502944)*sj2))+(((-0.002188742656)*cj2*sj2))+(((2.3392e-6)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x347.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x346.value)))+(x347.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x348=IKcos(j1);
IkReal x349=IKsin(j1);
IkReal x350=(cj0*px);
IkReal x351=((0.046784)*cj2);
IkReal x352=(py*sj0);
IkReal x353=((1.0)*pz);
IkReal x354=((0.046784)*sj2);
IkReal x355=((1.0)*x348);
IkReal x356=((0.107)*x349);
IkReal x357=((0.0001)*x348);
evalcond[0]=((((-1.0)*x353))+(((-1.0)*x349*x354))+(((0.0535)*x348))+((x348*x351))+(((5.0e-5)*x349)));
evalcond[1]=((0.0535)+(((-1.0)*x348*x353))+x351+((x349*x350))+((x349*x352))+(((-0.026)*x349)));
evalcond[2]=((5.0e-5)+(((-1.0)*x354))+(((0.026)*x348))+(((-1.0)*x349*x353))+(((-1.0)*x352*x355))+(((-1.0)*x350*x355)));
evalcond[3]=((0.026)+(((-0.0535)*x349))+(((-1.0)*x348*x354))+(((-1.0)*x349*x351))+(((-1.0)*x352))+(((-1.0)*x350))+(((5.0e-5)*x348)));
evalcond[4]=((-0.001337607344)+(((0.107)*pz*x348))+(((-1.0)*(px*px)))+(((0.0001)*pz*x349))+((x352*x357))+(((0.002782)*x349))+(((0.052)*x350))+(((0.052)*x352))+((x350*x357))+(((-1.0)*(py*py)))+(((-1.0)*x352*x356))+(((-2.6e-6)*x348))+(((-1.0)*pz*x353))+(((-1.0)*x350*x356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "6442dade8fb58ab7f20a6f266cbdcb25"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
