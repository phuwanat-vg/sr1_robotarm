/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-02-10 14:38:19.473705
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[0]);
x6=((0.075784)*x3);
x7=((0.0535)*x1);
x8=((0.004977)*x4);
x9=(x1*x4);
x10=(x2*x5);
x11=(x0*x2);
x12=((0.004977)*x1*x3);
IkReal x13=((1.0)*x11);
eetrans[0]=((-0.01036)+(((5.0e-5)*x11))+(((-1.0)*x13*x6))+(((-1.0)*x13*x8))+((x0*x12))+(((-0.012682)*x5))+(((-1.0)*x0*x7))+(((-0.075784)*x0*x9))+(((0.026)*x0)));
IkReal x14=((1.0)*x10);
eetrans[1]=((0.000133)+(((5.0e-5)*x10))+(((0.012682)*x0))+(((-0.075784)*x5*x9))+(((-1.0)*x5*x7))+((x12*x5))+(((-1.0)*x14*x6))+(((-1.0)*x14*x8))+(((0.026)*x5)));
IkReal x15=((1.0)*x1);
eetrans[2]=((0.065409)+(((0.0535)*x2))+(((0.075784)*x2*x4))+(((-1.0)*x15*x6))+(((-1.0)*x15*x8))+(((-0.004977)*x2*x3))+(((5.0e-5)*x1)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((0.01036)+px);
new_py=((-0.000133)+py);
new_pz=((-0.065409)+pz);
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[2];
j0eval[0]=((IKabs(px))+(IKabs(py)));
j0eval[1]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((0.998610844952978)+(((-123.056331664472)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((0.998610844952978)+(((-123.056331664472)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x16=IKasin(((0.998610844952978)+(((-123.056331664472)*(pz*pz)))));
j2array[0]=((-1.63731022586926)+(((-1.0)*x16)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.50428242772053)+x16);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x17=pz*pz;
IkReal x18=((18946.0)*pz);
IkReal x19=((1244.25)*pz);
j1eval[0]=((1.0)+(((1479.2899408284)*x17)));
j1eval[1]=IKsign(((169.0)+(((250000.0)*x17))));
j1eval[2]=((IKabs(((347.75)+(((-1.0)*sj2*x18))+(((12.5)*pz))+(((-32.3505)*sj2))+(((-1.0)*cj2*x19))+(((492.596)*cj2)))))+(IKabs(((-0.325)+(((-1.0)*sj2*x19))+(((13375.0)*pz))+(((32.3505)*cj2))+((cj2*x18))+(((492.596)*sj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x20=pz*pz;
IkReal x21=(pz*sj2);
IkReal x22=(cj2*pz);
j1eval[0]=((-1.0)+(((-1479.2899408284)*x20)));
j1eval[1]=IKsign(((-3.38e-5)+(((-0.05)*x20))));
j1eval[2]=((IKabs(((-6.955e-5)+(((4.054444)*x22))+(((6.4701e-6)*sj2))+(((-500.0)*(pz*pz*pz)))+(((-9.85192e-5)*cj2))+(((4.0575329045)*pz))+(((-0.2662695)*x21)))))+(IKabs(((-0.105495855517)+(((0.006923007)*sj2))+(((-0.002675)*pz))+(((13.0)*x20))+(((-0.105415544)*cj2))+(((-0.0037892)*x22))+(((0.00024885)*x21))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((1.0)+(((-3828.46153846154)*pz*sj2))+(((-99.54)*cj2))+(((-1515.68)*sj2))+(((41153.8461538462)*pz))+(((58295.3846153846)*cj2*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x23=cj2*cj2;
IkReal x24=(cj2*pz);
IkReal x25=(pz*sj2);
IkReal x26=(cj2*sj2);
CheckValue<IkReal> x27=IKPowWithIntegerCheck(((0.00065)+(((37.892)*x24))+(((-0.985192)*sj2))+(((-2.4885)*x25))+(((26.75)*pz))+(((-0.064701)*cj2))),-1);
if(!x27.valid){
continue;
}
CheckValue<IkReal> x28=IKPowWithIntegerCheck(((0.325)+(((13375.0)*pz))+(((-492.596)*sj2))+(((-32.3505)*cj2))+(((18946.0)*x24))+(((-1244.25)*x25))),-1);
if(!x28.valid){
continue;
}
if( IKabs(((x27.value)*(((0.189925984)+(((-0.13124015)*cj2))+(((13.0)*pz))+(((-0.377176968)*x23))+(((-2.027346425)*sj2))+(((-2.8592220635)*x26)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x28.value)*(((552.75513225)+(((-133.13475)*sj2))+(((2027.222)*cj2))+(((1429.61103175)*x23))+(((-188.588484)*x26)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x27.value)*(((0.189925984)+(((-0.13124015)*cj2))+(((13.0)*pz))+(((-0.377176968)*x23))+(((-2.027346425)*sj2))+(((-2.8592220635)*x26))))))+IKsqr(((x28.value)*(((552.75513225)+(((-133.13475)*sj2))+(((2027.222)*cj2))+(((1429.61103175)*x23))+(((-188.588484)*x26))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x27.value)*(((0.189925984)+(((-0.13124015)*cj2))+(((13.0)*pz))+(((-0.377176968)*x23))+(((-2.027346425)*sj2))+(((-2.8592220635)*x26))))), ((x28.value)*(((552.75513225)+(((-133.13475)*sj2))+(((2027.222)*cj2))+(((1429.61103175)*x23))+(((-188.588484)*x26))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x29=IKcos(j1);
IkReal x30=IKsin(j1);
IkReal x31=((0.004977)*sj2);
IkReal x32=((1.0)*pz);
IkReal x33=((0.004977)*cj2);
IkReal x34=((0.075784)*sj2);
IkReal x35=((0.075784)*cj2);
IkReal x36=((0.004977)*x29);
evalcond[0]=((0.0535)+(((-1.0)*x29*x32))+(((-1.0)*x31))+(((-0.026)*x30))+x35);
evalcond[1]=((5.0e-5)+(((-1.0)*x30*x32))+(((-1.0)*x34))+(((-1.0)*x33))+(((0.026)*x29)));
evalcond[2]=((0.002390565809)+(((0.002782)*x30))+(((-1.0)*pz*x32))+(((-2.6e-6)*x29))+(((0.107)*pz*x29))+(((0.0001)*pz*x30)));
evalcond[3]=((0.026)+(((-0.0535)*x30))+(((-1.0)*x29*x33))+(((-1.0)*x29*x34))+(((-1.0)*x30*x35))+((x30*x31))+(((5.0e-5)*x29)));
evalcond[4]=((((-1.0)*x29*x31))+((x29*x35))+(((0.0535)*x29))+(((-1.0)*x30*x34))+(((-1.0)*x30*x33))+(((-1.0)*x32))+(((5.0e-5)*x30)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x37=pz*pz;
IkReal x38=(pz*sj2);
IkReal x39=(cj2*pz);
CheckValue<IkReal> x40 = IKatan2WithCheck(IkReal(((-6.955e-5)+(((6.4701e-6)*sj2))+(((-0.2662695)*x38))+(((-500.0)*(pz*pz*pz)))+(((-9.85192e-5)*cj2))+(((4.0575329045)*pz))+(((4.054444)*x39)))),IkReal(((-0.105495855517)+(((-0.0037892)*x39))+(((0.006923007)*sj2))+(((-0.002675)*pz))+(((-0.105415544)*cj2))+(((13.0)*x37))+(((0.00024885)*x38)))),IKFAST_ATAN2_MAGTHRESH);
if(!x40.valid){
continue;
}
CheckValue<IkReal> x41=IKPowWithIntegerCheck(IKsign(((-3.38e-5)+(((-0.05)*x37)))),-1);
if(!x41.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x40.value)+(((1.5707963267949)*(x41.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x42=IKcos(j1);
IkReal x43=IKsin(j1);
IkReal x44=((0.004977)*sj2);
IkReal x45=((1.0)*pz);
IkReal x46=((0.004977)*cj2);
IkReal x47=((0.075784)*sj2);
IkReal x48=((0.075784)*cj2);
IkReal x49=((0.004977)*x42);
evalcond[0]=((0.0535)+(((-1.0)*x42*x45))+(((-1.0)*x44))+(((-0.026)*x43))+x48);
evalcond[1]=((5.0e-5)+(((-1.0)*x47))+(((-1.0)*x46))+(((-1.0)*x43*x45))+(((0.026)*x42)));
evalcond[2]=((0.002390565809)+(((-2.6e-6)*x42))+(((-1.0)*pz*x45))+(((0.107)*pz*x42))+(((0.0001)*pz*x43))+(((0.002782)*x43)));
evalcond[3]=((0.026)+(((-0.0535)*x43))+(((-1.0)*x42*x46))+(((-1.0)*x42*x47))+((x43*x44))+(((-1.0)*x43*x48))+(((5.0e-5)*x42)));
evalcond[4]=((((0.0535)*x42))+(((-1.0)*x42*x44))+(((-1.0)*x45))+(((-1.0)*x43*x46))+(((-1.0)*x43*x47))+(((5.0e-5)*x43))+((x42*x48)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x50=(cj2*pz);
IkReal x51=(pz*sj2);
CheckValue<IkReal> x52 = IKatan2WithCheck(IkReal(((347.75)+(((12.5)*pz))+(((-1244.25)*x50))+(((-32.3505)*sj2))+(((-18946.0)*x51))+(((492.596)*cj2)))),IkReal(((-0.325)+(((-1244.25)*x51))+(((18946.0)*x50))+(((13375.0)*pz))+(((32.3505)*cj2))+(((492.596)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x52.valid){
continue;
}
CheckValue<IkReal> x53=IKPowWithIntegerCheck(IKsign(((169.0)+(((250000.0)*(pz*pz))))),-1);
if(!x53.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x52.value)+(((1.5707963267949)*(x53.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x54=IKcos(j1);
IkReal x55=IKsin(j1);
IkReal x56=((0.004977)*sj2);
IkReal x57=((1.0)*pz);
IkReal x58=((0.004977)*cj2);
IkReal x59=((0.075784)*sj2);
IkReal x60=((0.075784)*cj2);
IkReal x61=((0.004977)*x54);
evalcond[0]=((0.0535)+(((-0.026)*x55))+(((-1.0)*x54*x57))+x60+(((-1.0)*x56)));
evalcond[1]=((5.0e-5)+(((-1.0)*x55*x57))+(((0.026)*x54))+(((-1.0)*x58))+(((-1.0)*x59)));
evalcond[2]=((0.002390565809)+(((0.002782)*x55))+(((0.0001)*pz*x55))+(((0.107)*pz*x54))+(((-2.6e-6)*x54))+(((-1.0)*pz*x57)));
evalcond[3]=((0.026)+(((5.0e-5)*x54))+(((-1.0)*x55*x60))+(((-0.0535)*x55))+(((-1.0)*x54*x59))+(((-1.0)*x54*x58))+((x55*x56)));
evalcond[4]=((((5.0e-5)*x55))+(((0.0535)*x54))+(((-1.0)*x55*x58))+(((-1.0)*x55*x59))+(((-1.0)*x54*x56))+(((-1.0)*x57))+((x54*x60)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((0.998610844952978)+(((-123.056331664472)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((0.998610844952978)+(((-123.056331664472)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x62=IKasin(((0.998610844952978)+(((-123.056331664472)*(pz*pz)))));
j2array[0]=((-1.63731022586926)+(((-1.0)*x62)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.50428242772053)+x62);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x63=pz*pz;
IkReal x64=((18946.0)*pz);
IkReal x65=((1244.25)*pz);
j1eval[0]=((1.0)+(((1479.2899408284)*x63)));
j1eval[1]=IKsign(((169.0)+(((250000.0)*x63))));
j1eval[2]=((IKabs(((-0.325)+(((13375.0)*pz))+(((32.3505)*cj2))+(((492.596)*sj2))+(((-1.0)*sj2*x65))+((cj2*x64)))))+(IKabs(((347.75)+(((12.5)*pz))+(((-32.3505)*sj2))+(((-1.0)*sj2*x64))+(((-1.0)*cj2*x65))+(((492.596)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x66=pz*pz;
IkReal x67=(pz*sj2);
IkReal x68=(cj2*pz);
j1eval[0]=((-1.0)+(((-1479.2899408284)*x66)));
j1eval[1]=IKsign(((-3.38e-5)+(((-0.05)*x66))));
j1eval[2]=((IKabs(((-6.955e-5)+(((6.4701e-6)*sj2))+(((-500.0)*(pz*pz*pz)))+(((-9.85192e-5)*cj2))+(((-0.2662695)*x67))+(((4.0575329045)*pz))+(((4.054444)*x68)))))+(IKabs(((-0.105495855517)+(((-0.0037892)*x68))+(((0.006923007)*sj2))+(((13.0)*x66))+(((-0.002675)*pz))+(((0.00024885)*x67))+(((-0.105415544)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((1.0)+(((-3828.46153846154)*pz*sj2))+(((-99.54)*cj2))+(((-1515.68)*sj2))+(((41153.8461538462)*pz))+(((58295.3846153846)*cj2*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x69=((-1515.68)+(((-3828.46153846154)*pz)));
IkReal x70=((-99.54)+(((58295.3846153846)*pz)));
IkReal x71=((1.0)+(((41153.8461538462)*pz)));
IkReal x72=((x70*x70)+(x69*x69));
if((((2307194.074)+(((3413008985.2071)*(pz*pz))))) < -0.00001)
continue;
IkReal x73=IKabs(IKsqrt(((2307194.074)+(((3413008985.2071)*(pz*pz))))));
CheckValue<IkReal> x80=IKPowWithIntegerCheck(x73,-1);
if(!x80.valid){
continue;
}
IkReal x74=x80.value;
IkReal x81 = x72;
if(IKabs(x81)==0){
continue;
}
IkReal x75=pow(x81,-0.5);
IkReal x76=(x71*x74);
IkReal x77=(x69*x75);
IkReal x78=((1.0)*x70*x75);
if((((1.0)+(((-1.0)*(x76*x76))))) < -0.00001)
continue;
IkReal x79=IKsqrt(((1.0)+(((-1.0)*(x76*x76)))));
CheckValue<IkReal> x82 = IKatan2WithCheck(IkReal(x70),IkReal(x69),IKFAST_ATAN2_MAGTHRESH);
if(!x82.valid){
continue;
}
if((x72) < -0.00001)
continue;
CheckValue<IkReal> x83=IKPowWithIntegerCheck(IKabs(IKsqrt(x72)),-1);
if(!x83.valid){
continue;
}
if( ((x71*(x83.value))) < -1-IKFAST_SINCOS_THRESH || ((x71*(x83.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x82.value)))+(((-1.0)*(IKasin((x71*(x83.value)))))));
IkReal gconst1=((((-1.0)*x78*x79))+(((-1.0)*x76*x77)));
IkReal gconst2=((((-1.0)*x76*x78))+((x77*x79)));
IkReal x84=j2;
CheckValue<IkReal> x90 = IKatan2WithCheck(IkReal(((-99.54)+(((58295.3846153846)*pz)))),IkReal(((-1515.68)+(((-3828.46153846154)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x90.valid){
continue;
}
IkReal x85=x90.value;
IkReal x86=x85;
if((((2307194.074)+(((3413008985.2071)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x91=IKPowWithIntegerCheck(IKabs(IKsqrt(((2307194.074)+(((3413008985.2071)*(pz*pz)))))),-1);
if(!x91.valid){
continue;
}
IkReal x87=x91.value;
if( ((x87+(((41153.8461538462)*pz*x87)))) < -1-IKFAST_SINCOS_THRESH || ((x87+(((41153.8461538462)*pz*x87)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x88=IKasin((x87+(((41153.8461538462)*pz*x87))));
IkReal x89=x88;
if(((((x84*x88))+((x84*x85))+((x85*x89))+((x85*x86))+((x86*x88))+((j2*x86))+((j2*x84))+((j2*x89))+((x88*x89)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x84*x88))+((x84*x85))+((x85*x89))+((x85*x86))+((x86*x88))+((j2*x86))+((j2*x84))+((j2*x89))+((x88*x89)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x92=x69;
IkReal x93=pz*pz;
IkReal x94=((-99.54)+(((58295.3846153846)*pz)));
IkReal x95=((1.0)+(((41153.8461538462)*pz)));
IkReal x96=((x94*x94)+(x92*x92));
IkReal x97=x73;
CheckValue<IkReal> x104=IKPowWithIntegerCheck(x97,-1);
if(!x104.valid){
continue;
}
IkReal x98=x104.value;
IkReal x105 = x96;
if(IKabs(x105)==0){
continue;
}
IkReal x99=pow(x105,-0.5);
if((x96) < -0.00001)
continue;
CheckValue<IkReal> x106=IKPowWithIntegerCheck(IKabs(IKsqrt(x96)),-1);
if(!x106.valid){
continue;
}
IkReal x100=x106.value;
if((((1.0)+(((-1.0)*(x95*x95)*(x98*x98))))) < -0.00001)
continue;
IkReal x101=IKsqrt(((1.0)+(((-1.0)*(x95*x95)*(x98*x98)))));
IkReal x102=(x95*x98*x99);
IkReal x103=(x101*x99);
px=0;
py=0;
pp=x93;
sj2=gconst1;
cj2=gconst2;
CheckValue<IkReal> x107 = IKatan2WithCheck(IkReal(((-99.54)+(((58309.0379008746)*pz)))),IkReal(((-1515.68)+(((-3828.48392036753)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x107.valid){
continue;
}
if( ((x100*(((1.0)+(((41152.2633744856)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x100*(((1.0)+(((41152.2633744856)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((((-1.0)*(x107.value)))+(((-1.0)*(IKasin((x100*(((1.0)+(((41152.2633744856)*pz))))))))));
CheckValue<IkReal> x108 = IKatan2WithCheck(IkReal(x94),IkReal(x92),IKFAST_ATAN2_MAGTHRESH);
if(!x108.valid){
continue;
}
if( ((x100*x95)) < -1-IKFAST_SINCOS_THRESH || ((x100*x95)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x108.value)))+(((-1.0)*(IKasin((x100*x95))))));
IkReal gconst1=((((-1.0)*x103*x94))+(((-1.0)*x102*x92)));
IkReal gconst2=((((-1.0)*x102*x94))+((x103*x92)));
IkReal x109=pz*pz;
j1eval[0]=((1.0)+(((1479.2899408284)*x109)));
j1eval[1]=IKsign(((169.0)+(((250000.0)*x109))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x110=gconst2*gconst2;
IkReal x111=gconst1*gconst1;
IkReal x112=(gconst1*gconst2);
IkReal x113=(gconst2*pz);
IkReal x114=(gconst1*pz);
CheckValue<IkReal> x115=IKPowWithIntegerCheck(((-347.75)+(((-492.596)*gconst2))+(((12.5)*pz))+(((-18946.0)*x114))+(((32.3505)*gconst1))+(((-1244.25)*x113))),-1);
if(!x115.valid){
continue;
}
CheckValue<IkReal> x116=IKPowWithIntegerCheck(((0.6955)+(((-0.064701)*gconst1))+(((37.892)*x114))+(((0.985192)*gconst2))+(((2.4885)*x113))+(((-0.025)*pz))),-1);
if(!x116.valid){
continue;
}
if( IKabs(((x115.value)*(((-168.999375)+(((1435.803664)*x111))+(((-1.8946)*gconst1))+(((-0.124425)*gconst2))+(((6.19263225)*x110))+(((188.588484)*x112)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x116.value)*(((-0.0013375)+(((2.8592220635)*x112))+(((0.188588484)*x110))+(((0.13124015)*gconst2))+(((2.027346425)*gconst1))+(((13.0)*pz))+(((-0.188588484)*x111)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x115.value)*(((-168.999375)+(((1435.803664)*x111))+(((-1.8946)*gconst1))+(((-0.124425)*gconst2))+(((6.19263225)*x110))+(((188.588484)*x112))))))+IKsqr(((x116.value)*(((-0.0013375)+(((2.8592220635)*x112))+(((0.188588484)*x110))+(((0.13124015)*gconst2))+(((2.027346425)*gconst1))+(((13.0)*pz))+(((-0.188588484)*x111))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x115.value)*(((-168.999375)+(((1435.803664)*x111))+(((-1.8946)*gconst1))+(((-0.124425)*gconst2))+(((6.19263225)*x110))+(((188.588484)*x112))))), ((x116.value)*(((-0.0013375)+(((2.8592220635)*x112))+(((0.188588484)*x110))+(((0.13124015)*gconst2))+(((2.027346425)*gconst1))+(((13.0)*pz))+(((-0.188588484)*x111))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x117=IKcos(j1);
IkReal x118=IKsin(j1);
IkReal x119=((0.075784)*gconst2);
IkReal x120=((0.004977)*gconst1);
IkReal x121=((0.075784)*gconst1);
IkReal x122=((0.004977)*gconst2);
IkReal x123=((1.0)*pz);
IkReal x124=(pz*x118);
evalcond[0]=((0.0535)+(((-1.0)*x117*x123))+(((-1.0)*x120))+x119+(((-0.026)*x118)));
evalcond[1]=((5.0e-5)+(((-1.0)*x118*x123))+(((-1.0)*x121))+(((-1.0)*x122))+(((0.026)*x117)));
evalcond[2]=((0.002390565809)+(((-1.0)*pz*x123))+(((0.107)*pz*x117))+(((-2.6e-6)*x117))+(((0.002782)*x118))+(((0.0001)*x124)));
evalcond[3]=((0.026)+(((5.0e-5)*x117))+(((-1.0)*x118*x119))+(((-0.0535)*x118))+(((-1.0)*x117*x122))+(((-1.0)*x117*x121))+((x118*x120)));
evalcond[4]=((((-1.0)*x118*x121))+(((-1.0)*x118*x122))+(((5.0e-5)*x118))+(((0.0535)*x117))+(((-1.0)*x117*x120))+(((-1.0)*x123))+((x117*x119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x125=((1244.25)*pz);
IkReal x126=((18946.0)*pz);
CheckValue<IkReal> x127=IKPowWithIntegerCheck(IKsign(((169.0)+(((250000.0)*(pz*pz))))),-1);
if(!x127.valid){
continue;
}
CheckValue<IkReal> x128 = IKatan2WithCheck(IkReal(((347.75)+(((-32.3505)*gconst1))+(((12.5)*pz))+(((-1.0)*gconst1*x126))+(((492.596)*gconst2))+(((-1.0)*gconst2*x125)))),IkReal(((-0.325)+((gconst2*x126))+(((32.3505)*gconst2))+(((13375.0)*pz))+(((-1.0)*gconst1*x125))+(((492.596)*gconst1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x128.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x127.value)))+(x128.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x129=IKcos(j1);
IkReal x130=IKsin(j1);
IkReal x131=((0.075784)*gconst2);
IkReal x132=((0.004977)*gconst1);
IkReal x133=((0.075784)*gconst1);
IkReal x134=((0.004977)*gconst2);
IkReal x135=((1.0)*pz);
IkReal x136=(pz*x130);
evalcond[0]=((0.0535)+x131+(((-1.0)*x132))+(((-0.026)*x130))+(((-1.0)*x129*x135)));
evalcond[1]=((5.0e-5)+(((-1.0)*x134))+(((-1.0)*x133))+(((0.026)*x129))+(((-1.0)*x130*x135)));
evalcond[2]=((0.002390565809)+(((-1.0)*pz*x135))+(((0.107)*pz*x129))+(((0.002782)*x130))+(((-2.6e-6)*x129))+(((0.0001)*x136)));
evalcond[3]=((0.026)+(((-0.0535)*x130))+(((5.0e-5)*x129))+((x130*x132))+(((-1.0)*x129*x134))+(((-1.0)*x129*x133))+(((-1.0)*x130*x131)));
evalcond[4]=(((x129*x131))+(((5.0e-5)*x130))+(((0.0535)*x129))+(((-1.0)*x135))+(((-1.0)*x129*x132))+(((-1.0)*x130*x133))+(((-1.0)*x130*x134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x137=((-1515.68)+(((-3828.46153846154)*pz)));
IkReal x138=((-99.54)+(((58295.3846153846)*pz)));
IkReal x139=((1.0)+(((41153.8461538462)*pz)));
IkReal x140=((x138*x138)+(x137*x137));
if((((2307194.074)+(((3413008985.2071)*(pz*pz))))) < -0.00001)
continue;
IkReal x141=IKabs(IKsqrt(((2307194.074)+(((3413008985.2071)*(pz*pz))))));
CheckValue<IkReal> x148=IKPowWithIntegerCheck(x141,-1);
if(!x148.valid){
continue;
}
IkReal x142=x148.value;
IkReal x149 = x140;
if(IKabs(x149)==0){
continue;
}
IkReal x143=pow(x149,-0.5);
IkReal x144=(x139*x142);
IkReal x145=((1.0)*x138*x143);
IkReal x146=((1.0)*x137*x143);
if((((1.0)+(((-1.0)*(x144*x144))))) < -0.00001)
continue;
IkReal x147=IKsqrt(((1.0)+(((-1.0)*(x144*x144)))));
if((x140) < -0.00001)
continue;
CheckValue<IkReal> x150=IKPowWithIntegerCheck(IKabs(IKsqrt(x140)),-1);
if(!x150.valid){
continue;
}
if( ((x139*(x150.value))) < -1-IKFAST_SINCOS_THRESH || ((x139*(x150.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x151 = IKatan2WithCheck(IkReal(x138),IkReal(x137),IKFAST_ATAN2_MAGTHRESH);
if(!x151.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(IKasin((x139*(x150.value))))+(((-1.0)*(x151.value))));
IkReal gconst4=((((-1.0)*x144*x146))+((x145*x147)));
IkReal gconst5=((((-1.0)*x144*x145))+(((-1.0)*x146*x147)));
IkReal x152=x137;
IkReal x153=((-99.54)+(((58295.3846153846)*pz)));
if((((x152*x152)+(x153*x153))) < -0.00001)
continue;
CheckValue<IkReal> x154=IKPowWithIntegerCheck(IKabs(IKsqrt(((x152*x152)+(x153*x153)))),-1);
if(!x154.valid){
continue;
}
if( (((x154.value)*(((1.0)+(((41153.8461538462)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x154.value)*(((1.0)+(((41153.8461538462)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x155 = IKatan2WithCheck(IkReal(x153),IkReal(x152),IKFAST_ATAN2_MAGTHRESH);
if(!x155.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((x154.value)*(((1.0)+(((41153.8461538462)*pz)))))))))+j2+(x155.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x156=x137;
IkReal x157=pz*pz;
IkReal x158=((-99.54)+(((58295.3846153846)*pz)));
IkReal x159=((1.0)+(((41153.8461538462)*pz)));
IkReal x160=((x158*x158)+(x156*x156));
IkReal x161=x141;
CheckValue<IkReal> x168=IKPowWithIntegerCheck(x161,-1);
if(!x168.valid){
continue;
}
IkReal x162=x168.value;
IkReal x169 = x160;
if(IKabs(x169)==0){
continue;
}
IkReal x163=pow(x169,-0.5);
if((x160) < -0.00001)
continue;
CheckValue<IkReal> x170=IKPowWithIntegerCheck(IKabs(IKsqrt(x160)),-1);
if(!x170.valid){
continue;
}
IkReal x164=x170.value;
if((((1.0)+(((-1.0)*(x159*x159)*(x162*x162))))) < -0.00001)
continue;
IkReal x165=IKsqrt(((1.0)+(((-1.0)*(x159*x159)*(x162*x162)))));
IkReal x166=((1.0)*x159*x162*x163);
IkReal x167=((1.0)*x163*x165);
px=0;
py=0;
pp=x157;
sj2=gconst4;
cj2=gconst5;
CheckValue<IkReal> x171 = IKatan2WithCheck(IkReal(((-99.54)+(((58309.0379008746)*pz)))),IkReal(((-1515.68)+(((-3828.48392036753)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x171.valid){
continue;
}
if( ((x164*(((1.0)+(((41152.2633744856)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x164*(((1.0)+(((41152.2633744856)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((3.14159265)+(((-1.0)*(x171.value)))+(IKasin((x164*(((1.0)+(((41152.2633744856)*pz))))))));
CheckValue<IkReal> x172 = IKatan2WithCheck(IkReal(x158),IkReal(x156),IKFAST_ATAN2_MAGTHRESH);
if(!x172.valid){
continue;
}
if( ((x159*x164)) < -1-IKFAST_SINCOS_THRESH || ((x159*x164)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x172.value)))+(IKasin((x159*x164))));
IkReal gconst4=(((x158*x167))+(((-1.0)*x156*x166)));
IkReal gconst5=((((-1.0)*x158*x166))+(((-1.0)*x156*x167)));
IkReal x173=pz*pz;
j1eval[0]=((1.0)+(((1479.2899408284)*x173)));
j1eval[1]=IKsign(((169.0)+(((250000.0)*x173))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x174=gconst4*gconst4;
IkReal x175=gconst5*gconst5;
IkReal x176=(gconst5*pz);
IkReal x177=(gconst4*gconst5);
IkReal x178=(gconst4*pz);
CheckValue<IkReal> x179=IKPowWithIntegerCheck(((0.00065)+(((-0.064701)*gconst5))+(((37.892)*x176))+(((26.75)*pz))+(((-0.985192)*gconst4))+(((-2.4885)*x178))),-1);
if(!x179.valid){
continue;
}
CheckValue<IkReal> x180=IKPowWithIntegerCheck(((0.325)+(((-32.3505)*gconst5))+(((-492.596)*gconst4))+(((13375.0)*pz))+(((-1244.25)*x178))+(((18946.0)*x176))),-1);
if(!x180.valid){
continue;
}
if( IKabs(((x179.value)*(((0.0013375)+(((-2.027346425)*gconst4))+(((0.188588484)*x174))+(((-2.8592220635)*x177))+(((-0.188588484)*x175))+(((13.0)*pz))+(((-0.13124015)*gconst5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x180.value)*(((546.5625)+(((2027.222)*gconst5))+(((-188.588484)*x177))+(((1435.803664)*x175))+(((6.19263225)*x174))+(((-133.13475)*gconst4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x179.value)*(((0.0013375)+(((-2.027346425)*gconst4))+(((0.188588484)*x174))+(((-2.8592220635)*x177))+(((-0.188588484)*x175))+(((13.0)*pz))+(((-0.13124015)*gconst5))))))+IKsqr(((x180.value)*(((546.5625)+(((2027.222)*gconst5))+(((-188.588484)*x177))+(((1435.803664)*x175))+(((6.19263225)*x174))+(((-133.13475)*gconst4))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x179.value)*(((0.0013375)+(((-2.027346425)*gconst4))+(((0.188588484)*x174))+(((-2.8592220635)*x177))+(((-0.188588484)*x175))+(((13.0)*pz))+(((-0.13124015)*gconst5))))), ((x180.value)*(((546.5625)+(((2027.222)*gconst5))+(((-188.588484)*x177))+(((1435.803664)*x175))+(((6.19263225)*x174))+(((-133.13475)*gconst4))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x181=IKcos(j1);
IkReal x182=IKsin(j1);
IkReal x183=((0.004977)*gconst5);
IkReal x184=((1.0)*pz);
IkReal x185=((0.075784)*gconst5);
IkReal x186=((0.004977)*gconst4);
IkReal x187=((0.075784)*gconst4);
evalcond[0]=((0.0535)+(((-0.026)*x182))+(((-1.0)*x186))+x185+(((-1.0)*x181*x184)));
evalcond[1]=((5.0e-5)+(((-1.0)*x187))+(((-1.0)*x183))+(((0.026)*x181))+(((-1.0)*x182*x184)));
evalcond[2]=((0.002390565809)+(((0.002782)*x182))+(((0.0001)*pz*x182))+(((-1.0)*pz*x184))+(((-2.6e-6)*x181))+(((0.107)*pz*x181)));
evalcond[3]=((0.026)+(((5.0e-5)*x181))+(((-0.0535)*x182))+(((-1.0)*x182*x185))+((x182*x186))+(((-1.0)*x181*x187))+(((-1.0)*x181*x183)));
evalcond[4]=((((-1.0)*x184))+(((5.0e-5)*x182))+(((0.0535)*x181))+(((-1.0)*x182*x187))+(((-1.0)*x182*x183))+((x181*x185))+(((-1.0)*x181*x186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x188=((18946.0)*pz);
IkReal x189=((1244.25)*pz);
CheckValue<IkReal> x190=IKPowWithIntegerCheck(IKsign(((169.0)+(((250000.0)*(pz*pz))))),-1);
if(!x190.valid){
continue;
}
CheckValue<IkReal> x191 = IKatan2WithCheck(IkReal(((347.75)+(((-32.3505)*gconst4))+(((12.5)*pz))+(((-1.0)*gconst5*x189))+(((-1.0)*gconst4*x188))+(((492.596)*gconst5)))),IkReal(((-0.325)+(((32.3505)*gconst5))+(((13375.0)*pz))+(((-1.0)*gconst4*x189))+(((492.596)*gconst4))+((gconst5*x188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x191.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x190.value)))+(x191.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x192=IKcos(j1);
IkReal x193=IKsin(j1);
IkReal x194=((0.004977)*gconst5);
IkReal x195=((1.0)*pz);
IkReal x196=((0.075784)*gconst5);
IkReal x197=((0.004977)*gconst4);
IkReal x198=((0.075784)*gconst4);
evalcond[0]=((0.0535)+(((-0.026)*x193))+(((-1.0)*x192*x195))+(((-1.0)*x197))+x196);
evalcond[1]=((5.0e-5)+(((-1.0)*x198))+(((-1.0)*x194))+(((0.026)*x192))+(((-1.0)*x193*x195)));
evalcond[2]=((0.002390565809)+(((-1.0)*pz*x195))+(((0.002782)*x193))+(((0.0001)*pz*x193))+(((-2.6e-6)*x192))+(((0.107)*pz*x192)));
evalcond[3]=((0.026)+((x193*x197))+(((-1.0)*x192*x194))+(((-1.0)*x192*x198))+(((5.0e-5)*x192))+(((-0.0535)*x193))+(((-1.0)*x193*x196)));
evalcond[4]=((((-1.0)*x192*x197))+(((-1.0)*x195))+(((5.0e-5)*x193))+((x192*x196))+(((0.0535)*x192))+(((-1.0)*x193*x198))+(((-1.0)*x193*x194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x199=cj2*cj2;
IkReal x200=(cj2*pz);
IkReal x201=(pz*sj2);
IkReal x202=(cj2*sj2);
CheckValue<IkReal> x203=IKPowWithIntegerCheck(((0.00065)+(((-0.985192)*sj2))+(((-2.4885)*x201))+(((26.75)*pz))+(((-0.064701)*cj2))+(((37.892)*x200))),-1);
if(!x203.valid){
continue;
}
CheckValue<IkReal> x204=IKPowWithIntegerCheck(((0.325)+(((18946.0)*x200))+(((13375.0)*pz))+(((-492.596)*sj2))+(((-32.3505)*cj2))+(((-1244.25)*x201))),-1);
if(!x204.valid){
continue;
}
if( IKabs(((x203.value)*(((0.189925984)+(((-2.8592220635)*x202))+(((-0.377176968)*x199))+(((-0.13124015)*cj2))+(((13.0)*pz))+(((-2.027346425)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x204.value)*(((552.75513225)+(((1429.61103175)*x199))+(((-133.13475)*sj2))+(((-188.588484)*x202))+(((2027.222)*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x203.value)*(((0.189925984)+(((-2.8592220635)*x202))+(((-0.377176968)*x199))+(((-0.13124015)*cj2))+(((13.0)*pz))+(((-2.027346425)*sj2))))))+IKsqr(((x204.value)*(((552.75513225)+(((1429.61103175)*x199))+(((-133.13475)*sj2))+(((-188.588484)*x202))+(((2027.222)*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x203.value)*(((0.189925984)+(((-2.8592220635)*x202))+(((-0.377176968)*x199))+(((-0.13124015)*cj2))+(((13.0)*pz))+(((-2.027346425)*sj2))))), ((x204.value)*(((552.75513225)+(((1429.61103175)*x199))+(((-133.13475)*sj2))+(((-188.588484)*x202))+(((2027.222)*cj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x205=IKcos(j1);
IkReal x206=IKsin(j1);
IkReal x207=((0.004977)*sj2);
IkReal x208=((1.0)*pz);
IkReal x209=((0.004977)*cj2);
IkReal x210=((0.075784)*sj2);
IkReal x211=((0.075784)*cj2);
IkReal x212=((0.004977)*x205);
evalcond[0]=((0.0535)+(((-1.0)*x207))+(((-0.026)*x206))+x211+(((-1.0)*x205*x208)));
evalcond[1]=((5.0e-5)+(((0.026)*x205))+(((-1.0)*x206*x208))+(((-1.0)*x209))+(((-1.0)*x210)));
evalcond[2]=((0.002390565809)+(((0.107)*pz*x205))+(((-1.0)*pz*x208))+(((0.0001)*pz*x206))+(((-2.6e-6)*x205))+(((0.002782)*x206)));
evalcond[3]=((0.026)+(((5.0e-5)*x205))+(((-1.0)*x206*x211))+(((-1.0)*x205*x210))+(((-0.0535)*x206))+(((-1.0)*x205*x209))+((x206*x207)));
evalcond[4]=((((5.0e-5)*x206))+(((-1.0)*x206*x210))+(((0.0535)*x205))+(((-1.0)*x206*x209))+((x205*x211))+(((-1.0)*x208))+(((-1.0)*x205*x207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x213=pz*pz;
IkReal x214=(pz*sj2);
IkReal x215=(cj2*pz);
CheckValue<IkReal> x216=IKPowWithIntegerCheck(IKsign(((-3.38e-5)+(((-0.05)*x213)))),-1);
if(!x216.valid){
continue;
}
CheckValue<IkReal> x217 = IKatan2WithCheck(IkReal(((-6.955e-5)+(((-0.2662695)*x214))+(((6.4701e-6)*sj2))+(((-500.0)*(pz*pz*pz)))+(((-9.85192e-5)*cj2))+(((4.0575329045)*pz))+(((4.054444)*x215)))),IkReal(((-0.105495855517)+(((0.00024885)*x214))+(((13.0)*x213))+(((0.006923007)*sj2))+(((-0.002675)*pz))+(((-0.105415544)*cj2))+(((-0.0037892)*x215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x217.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x216.value)))+(x217.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x218=IKcos(j1);
IkReal x219=IKsin(j1);
IkReal x220=((0.004977)*sj2);
IkReal x221=((1.0)*pz);
IkReal x222=((0.004977)*cj2);
IkReal x223=((0.075784)*sj2);
IkReal x224=((0.075784)*cj2);
IkReal x225=((0.004977)*x218);
evalcond[0]=((0.0535)+x224+(((-1.0)*x218*x221))+(((-0.026)*x219))+(((-1.0)*x220)));
evalcond[1]=((5.0e-5)+(((-1.0)*x219*x221))+(((0.026)*x218))+(((-1.0)*x223))+(((-1.0)*x222)));
evalcond[2]=((0.002390565809)+(((-2.6e-6)*x218))+(((0.002782)*x219))+(((-1.0)*pz*x221))+(((0.0001)*pz*x219))+(((0.107)*pz*x218)));
evalcond[3]=((0.026)+(((-0.0535)*x219))+(((-1.0)*x219*x224))+((x219*x220))+(((-1.0)*x218*x223))+(((-1.0)*x218*x222))+(((5.0e-5)*x218)));
evalcond[4]=((((-1.0)*x219*x223))+(((-1.0)*x219*x222))+(((-1.0)*x218*x220))+((x218*x224))+(((5.0e-5)*x219))+(((0.0535)*x218))+(((-1.0)*x221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x226=(cj2*pz);
IkReal x227=(pz*sj2);
CheckValue<IkReal> x228 = IKatan2WithCheck(IkReal(((347.75)+(((12.5)*pz))+(((-32.3505)*sj2))+(((-18946.0)*x227))+(((-1244.25)*x226))+(((492.596)*cj2)))),IkReal(((-0.325)+(((13375.0)*pz))+(((32.3505)*cj2))+(((18946.0)*x226))+(((492.596)*sj2))+(((-1244.25)*x227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x228.valid){
continue;
}
CheckValue<IkReal> x229=IKPowWithIntegerCheck(IKsign(((169.0)+(((250000.0)*(pz*pz))))),-1);
if(!x229.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x228.value)+(((1.5707963267949)*(x229.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x230=IKcos(j1);
IkReal x231=IKsin(j1);
IkReal x232=((0.004977)*sj2);
IkReal x233=((1.0)*pz);
IkReal x234=((0.004977)*cj2);
IkReal x235=((0.075784)*sj2);
IkReal x236=((0.075784)*cj2);
IkReal x237=((0.004977)*x230);
evalcond[0]=((0.0535)+(((-1.0)*x230*x233))+(((-0.026)*x231))+(((-1.0)*x232))+x236);
evalcond[1]=((5.0e-5)+(((0.026)*x230))+(((-1.0)*x235))+(((-1.0)*x234))+(((-1.0)*x231*x233)));
evalcond[2]=((0.002390565809)+(((0.002782)*x231))+(((0.107)*pz*x230))+(((-1.0)*pz*x233))+(((-2.6e-6)*x230))+(((0.0001)*pz*x231)));
evalcond[3]=((0.026)+(((-1.0)*x230*x235))+(((-1.0)*x230*x234))+(((-0.0535)*x231))+(((-1.0)*x231*x236))+((x231*x232))+(((5.0e-5)*x230)));
evalcond[4]=((((-1.0)*x230*x232))+(((0.0535)*x230))+((x230*x236))+(((-1.0)*x233))+(((-1.0)*x231*x234))+(((-1.0)*x231*x235))+(((5.0e-5)*x231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x240 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x240.valid){
continue;
}
IkReal x238=((1.0)*(x240.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x241=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x241.valid){
continue;
}
if( (((0.012682)*(x241.value))) < -1-IKFAST_SINCOS_THRESH || (((0.012682)*(x241.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x239=IKasin(((0.012682)*(x241.value)));
j0array[0]=((((-1.0)*x238))+x239);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x238))+(((-1.0)*x239)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-0.998610844952978)+(((123.056331664472)*(py*py)))+(((-6.39892924655254)*cj0*px))+(((123.056331664472)*(px*px)))+(((123.056331664472)*(pz*pz)))+(((-6.39892924655254)*py*sj0)))) < -1-IKFAST_SINCOS_THRESH || (((-0.998610844952978)+(((123.056331664472)*(py*py)))+(((-6.39892924655254)*cj0*px))+(((123.056331664472)*(px*px)))+(((123.056331664472)*(pz*pz)))+(((-6.39892924655254)*py*sj0)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x242=IKasin(((-0.998610844952978)+(((123.056331664472)*(py*py)))+(((-6.39892924655254)*cj0*px))+(((123.056331664472)*(px*px)))+(((123.056331664472)*(pz*pz)))+(((-6.39892924655254)*py*sj0))));
j2array[0]=((-1.63731022586926)+(((1.0)*x242)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.50428242772053)+(((-1.0)*x242)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
IkReal x243=cj2*cj2;
IkReal x244=((0.075784)*cj2);
IkReal x245=(py*sj0);
IkReal x246=(cj0*px);
IkReal x247=(pz*sj2);
IkReal x248=(cj2*pz);
IkReal x249=(cj2*sj2);
IkReal x250=((1515.68)*cj2);
IkReal x251=((0.004977)*sj2);
IkReal x252=((99.54)*sj2);
j1eval[0]=((-27.82)+((x246*x250))+(((-1515.68)*x247))+((x245*x250))+(((-39.40768)*cj2))+(((-1.0)*x246*x252))+(((-1.0)*x245*x252))+pz+(((1070.0)*x245))+(((1070.0)*x246))+(((2.58804)*sj2))+(((-99.54)*x248)));
j1eval[1]=IKsign(((-0.001391)+(((0.0535)*x245))+(((0.0535)*x246))+(((5.0e-5)*pz))+(((-0.001970384)*cj2))+(((-0.075784)*x247))+(((0.000129402)*sj2))+((x244*x245))+((x244*x246))+(((-1.0)*x246*x251))+(((-1.0)*x245*x251))+(((-0.004977)*x248))));
j1eval[2]=((IKabs(((0.000379851968)+(((-0.0002624803)*cj2))+(((-0.026)*pz))+(((-0.000754353936)*x243))+(((-0.005718444127)*x249))+(((-0.00405469285)*sj2))+((pz*x245))+((pz*x246)))))+(IKabs(((-0.002887020529)+(((-0.008108888)*cj2))+(((0.000754353936)*x249))+(((-0.005718444127)*x243))+(pz*pz)+(((0.000532539)*sj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x253=(cj0*px);
IkReal x254=((3828.46153846154)*cj2);
IkReal x255=((0.075784)*sj2);
IkReal x256=(py*sj0);
IkReal x257=((58295.3846153846)*sj2);
IkReal x258=(pz*sj2);
IkReal x259=(cj2*pz);
IkReal x260=((0.004977)*cj2);
j1eval[0]=((1.0)+((x256*x257))+(((-38.4615384615385)*x256))+(((-38.4615384615385)*x253))+((x253*x254))+((x253*x257))+(((-99.54)*cj2))+(((-1515.68)*sj2))+(((58295.3846153846)*x259))+((x254*x256))+(((41153.8461538462)*pz))+(((-3828.46153846154)*x258)));
j1eval[1]=IKsign(((1.3e-6)+(((0.075784)*x259))+(((-5.0e-5)*x256))+(((-5.0e-5)*x253))+((x253*x260))+(((-0.004977)*x258))+(((-0.001970384)*sj2))+((x253*x255))+((x256*x260))+(((-0.000129402)*cj2))+((x255*x256))+(((0.0535)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x261=py*py;
IkReal x262=cj0*cj0;
IkReal x263=px*px;
IkReal x264=pz*pz;
IkReal x265=(cj0*px);
IkReal x266=(py*sj0);
IkReal x267=((1479.2899408284)*x261);
IkReal x268=(x262*x263);
j1eval[0]=((-1.0)+(((76.9230769230769)*x266))+(((76.9230769230769)*x265))+(((-2958.5798816568)*x265*x266))+((x262*x267))+(((-1479.2899408284)*x268))+(((-1479.2899408284)*x264))+(((-1.0)*x267)));
j1eval[1]=IKsign(((-0.000676)+(((-1.0)*x268))+(((-1.0)*x261))+(((-1.0)*x264))+(((0.052)*x265))+(((0.052)*x266))+(((-2.0)*x265*x266))+((x261*x262))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x269=py*py;
IkReal x270=cj0*cj0;
IkReal x271=(py*sj0);
IkReal x272=((0.075784)*cj2);
IkReal x273=(cj0*px);
IkReal x274=((0.075784)*sj2);
IkReal x275=((0.004977)*sj2);
IkReal x276=((0.004977)*cj2);
CheckValue<IkReal> x277 = IKatan2WithCheck(IkReal(((-0.001391)+((x272*x273))+(((0.0535)*x271))+(((0.0535)*x273))+(((-1.0)*x273*x275))+((x271*x272))+(((-5.0e-5)*pz))+(((-1.0)*x271*x275))+(((-0.001970384)*cj2))+(((0.000129402)*sj2))+((pz*x274))+((pz*x276)))),IkReal(((1.3e-6)+((x273*x276))+((x273*x274))+(((-1.0)*pz*x272))+((x271*x274))+((x271*x276))+(((-0.0535)*pz))+(((-0.001970384)*sj2))+(((-5.0e-5)*x271))+(((-5.0e-5)*x273))+(((-0.000129402)*cj2))+((pz*x275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x277.valid){
continue;
}
CheckValue<IkReal> x278=IKPowWithIntegerCheck(IKsign(((-0.000676)+(((-1.0)*x269))+(((0.052)*x271))+(((0.052)*x273))+(((-1.0)*(pz*pz)))+(((-2.0)*x271*x273))+(((-1.0)*x270*(px*px)))+((x269*x270)))),-1);
if(!x278.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x277.value)+(((1.5707963267949)*(x278.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x279=IKsin(j1);
IkReal x280=IKcos(j1);
IkReal x281=(cj0*px);
IkReal x282=((0.004977)*sj2);
IkReal x283=(py*sj0);
IkReal x284=((1.0)*pz);
IkReal x285=((0.004977)*cj2);
IkReal x286=((0.075784)*sj2);
IkReal x287=((0.075784)*cj2);
IkReal x288=((0.004977)*x280);
IkReal x289=((1.0)*x280);
IkReal x290=((0.107)*x279);
IkReal x291=((0.0001)*x280);
evalcond[0]=((0.0535)+((x279*x281))+((x279*x283))+(((-0.026)*x279))+(((-1.0)*x280*x284))+x287+(((-1.0)*x282)));
evalcond[1]=((5.0e-5)+(((-1.0)*x281*x289))+(((-1.0)*x285))+(((-1.0)*x286))+(((0.026)*x280))+(((-1.0)*x279*x284))+(((-1.0)*x283*x289)));
evalcond[2]=((((-1.0)*x280*x282))+(((0.0535)*x280))+(((-1.0)*x284))+(((5.0e-5)*x279))+((x280*x287))+(((-1.0)*x279*x285))+(((-1.0)*x279*x286)));
evalcond[3]=((0.026)+((x279*x282))+(((-1.0)*x280*x285))+(((-1.0)*x280*x286))+(((5.0e-5)*x280))+(((-1.0)*x281))+(((-1.0)*x283))+(((-0.0535)*x279))+(((-1.0)*x279*x287)));
evalcond[4]=((0.002390565809)+(((-1.0)*(px*px)))+(((0.002782)*x279))+(((-2.6e-6)*x280))+((x281*x291))+((x283*x291))+(((0.052)*x281))+(((0.052)*x283))+(((-1.0)*x283*x290))+(((0.0001)*pz*x279))+(((-1.0)*pz*x284))+(((0.107)*pz*x280))+(((-1.0)*(py*py)))+(((-1.0)*x281*x290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x292=cj2*cj2;
IkReal x293=(cj2*sj2);
IkReal x294=(cj0*px);
IkReal x295=((0.075784)*sj2);
IkReal x296=(py*sj0);
IkReal x297=((0.004977)*cj2);
IkReal x298=((1.0)*pz);
CheckValue<IkReal> x299 = IKatan2WithCheck(IkReal(((0.000379851968)+(((-0.0002624803)*cj2))+(((-0.005718444127)*x293))+(((-0.000754353936)*x292))+(((-1.0)*x296*x298))+(((-0.00405469285)*sj2))+(((0.026)*pz))+(((-1.0)*x294*x298)))),IkReal(((-0.005743217156)+(((4.977e-7)*cj2))+(((7.5784e-6)*sj2))+(((-0.000754353936)*x293))+(((0.005718444127)*x292))+(pz*pz))),IKFAST_ATAN2_MAGTHRESH);
if(!x299.valid){
continue;
}
CheckValue<IkReal> x300=IKPowWithIntegerCheck(IKsign(((1.3e-6)+(((0.075784)*cj2*pz))+(((-5.0e-5)*x296))+(((-5.0e-5)*x294))+(((-0.001970384)*sj2))+((x295*x296))+((x296*x297))+((x294*x295))+((x294*x297))+(((-0.004977)*pz*sj2))+(((-0.000129402)*cj2))+(((0.0535)*pz)))),-1);
if(!x300.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x299.value)+(((1.5707963267949)*(x300.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x301=IKsin(j1);
IkReal x302=IKcos(j1);
IkReal x303=(cj0*px);
IkReal x304=((0.004977)*sj2);
IkReal x305=(py*sj0);
IkReal x306=((1.0)*pz);
IkReal x307=((0.004977)*cj2);
IkReal x308=((0.075784)*sj2);
IkReal x309=((0.075784)*cj2);
IkReal x310=((0.004977)*x302);
IkReal x311=((1.0)*x302);
IkReal x312=((0.107)*x301);
IkReal x313=((0.0001)*x302);
evalcond[0]=((0.0535)+((x301*x305))+((x301*x303))+(((-0.026)*x301))+(((-1.0)*x302*x306))+x309+(((-1.0)*x304)));
evalcond[1]=((5.0e-5)+(((0.026)*x302))+(((-1.0)*x301*x306))+(((-1.0)*x303*x311))+(((-1.0)*x305*x311))+(((-1.0)*x307))+(((-1.0)*x308)));
evalcond[2]=((((0.0535)*x302))+(((5.0e-5)*x301))+(((-1.0)*x301*x308))+(((-1.0)*x301*x307))+(((-1.0)*x302*x304))+((x302*x309))+(((-1.0)*x306)));
evalcond[3]=((0.026)+((x301*x304))+(((5.0e-5)*x302))+(((-1.0)*x301*x309))+(((-1.0)*x302*x308))+(((-1.0)*x302*x307))+(((-1.0)*x305))+(((-1.0)*x303))+(((-0.0535)*x301)));
evalcond[4]=((0.002390565809)+((x305*x313))+(((-1.0)*(px*px)))+(((0.107)*pz*x302))+(((-1.0)*x303*x312))+(((-1.0)*x305*x312))+(((0.0001)*pz*x301))+(((-1.0)*pz*x306))+(((-2.6e-6)*x302))+((x303*x313))+(((-1.0)*(py*py)))+(((0.002782)*x301))+(((0.052)*x303))+(((0.052)*x305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x314=cj2*cj2;
IkReal x315=((0.075784)*cj2);
IkReal x316=(py*sj0);
IkReal x317=(cj0*px);
IkReal x318=(cj2*sj2);
IkReal x319=((0.004977)*sj2);
CheckValue<IkReal> x320=IKPowWithIntegerCheck(IKsign(((-0.001391)+(((5.0e-5)*pz))+(((-0.004977)*cj2*pz))+(((-0.001970384)*cj2))+((x315*x317))+((x315*x316))+(((0.000129402)*sj2))+(((0.0535)*x316))+(((0.0535)*x317))+(((-1.0)*x317*x319))+(((-1.0)*x316*x319))+(((-0.075784)*pz*sj2)))),-1);
if(!x320.valid){
continue;
}
CheckValue<IkReal> x321 = IKatan2WithCheck(IkReal(((-0.002887020529)+(((-0.008108888)*cj2))+(pz*pz)+(((0.000754353936)*x318))+(((0.000532539)*sj2))+(((-0.005718444127)*x314)))),IkReal(((0.000379851968)+(((-0.0002624803)*cj2))+(((-0.026)*pz))+(((-0.000754353936)*x314))+(((-0.00405469285)*sj2))+((pz*x316))+((pz*x317))+(((-0.005718444127)*x318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x321.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x320.value)))+(x321.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x322=IKsin(j1);
IkReal x323=IKcos(j1);
IkReal x324=(cj0*px);
IkReal x325=((0.004977)*sj2);
IkReal x326=(py*sj0);
IkReal x327=((1.0)*pz);
IkReal x328=((0.004977)*cj2);
IkReal x329=((0.075784)*sj2);
IkReal x330=((0.075784)*cj2);
IkReal x331=((0.004977)*x323);
IkReal x332=((1.0)*x323);
IkReal x333=((0.107)*x322);
IkReal x334=((0.0001)*x323);
evalcond[0]=((0.0535)+((x322*x326))+((x322*x324))+(((-1.0)*x325))+(((-1.0)*x323*x327))+x330+(((-0.026)*x322)));
evalcond[1]=((5.0e-5)+(((-1.0)*x329))+(((-1.0)*x328))+(((-1.0)*x324*x332))+(((-1.0)*x322*x327))+(((0.026)*x323))+(((-1.0)*x326*x332)));
evalcond[2]=((((0.0535)*x323))+(((-1.0)*x327))+(((-1.0)*x322*x329))+(((-1.0)*x322*x328))+(((-1.0)*x323*x325))+(((5.0e-5)*x322))+((x323*x330)));
evalcond[3]=((0.026)+((x322*x325))+(((-0.0535)*x322))+(((-1.0)*x326))+(((-1.0)*x324))+(((-1.0)*x323*x329))+(((-1.0)*x323*x328))+(((5.0e-5)*x323))+(((-1.0)*x322*x330)));
evalcond[4]=((0.002390565809)+(((-1.0)*(px*px)))+(((0.002782)*x322))+((x324*x334))+(((-1.0)*x324*x333))+(((0.052)*x326))+(((0.052)*x324))+((x326*x334))+(((-2.6e-6)*x323))+(((0.107)*pz*x323))+(((-1.0)*(py*py)))+(((-1.0)*pz*x327))+(((-1.0)*x326*x333))+(((0.0001)*pz*x322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "69ccb49ae60c74980a82d8f583172fdc"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
